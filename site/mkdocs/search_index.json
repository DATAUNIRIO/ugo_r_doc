{
    "docs": [
        {
            "location": "/", 
            "text": "Let there be light!\n\n\nA R documentation website.\n\n\nLayout\n\n\n\n\nugo_r_doc\n is a corpus: a catalog of books, manuals, articles, presentations, videos, podcasts, summaries, notes, code snippets, excerpts, websites, etc.\n\n\nA Mkdocs site is automatically indexed. The \ndocs\n is a searchable knowledge-based system. \n\n\nYou type a keyword, it leads to several sources, you identify the document the source belongs to, and you go retrieve the document; whether it is a digital or a material document. Fast and easy!\n\n\nFor that matter, \ngenerously\n adding keywords to the \ndocs\n is crucial (adding them in subscript makes them stand apart).\n\n\nCitations, keywords, links, etc.; they all provide leads.\n\n\nThe corpus is unstructured. There is no unique chapter dedicated to one topic.\n\n\nKnowledge is rather cumulated, layer after layer, resulting in a hotchpotch of information. \n\n\nInformation may be repeted among many documents, with different explanations, or some more comprehensive.\n\n\nNewer entries might also supplement or contradict older entries.", 
            "title": "Home"
        }, 
        {
            "location": "/#layout", 
            "text": "ugo_r_doc  is a corpus: a catalog of books, manuals, articles, presentations, videos, podcasts, summaries, notes, code snippets, excerpts, websites, etc.  A Mkdocs site is automatically indexed. The  docs  is a searchable knowledge-based system.   You type a keyword, it leads to several sources, you identify the document the source belongs to, and you go retrieve the document; whether it is a digital or a material document. Fast and easy!  For that matter,  generously  adding keywords to the  docs  is crucial (adding them in subscript makes them stand apart).  Citations, keywords, links, etc.; they all provide leads.  The corpus is unstructured. There is no unique chapter dedicated to one topic.  Knowledge is rather cumulated, layer after layer, resulting in a hotchpotch of information.   Information may be repeted among many documents, with different explanations, or some more comprehensive.  Newer entries might also supplement or contradict older entries.", 
            "title": "Layout"
        }, 
        {
            "location": "/An Introduction to R/", 
            "text": "An Introduction to R\n\n\nForeword\n\n\nNotes, leads, and ideas on what R can do. More at:\n\n\n\n\nwww.statmethods.net (Quick-R, searchable R guide)\n\n\nR-intro\n\n\ncran.r-project.org/manuals (series of official manuals)\n\n\n\n\n\n\nContent\n\n\nAn Introduction to R\n\n\n1, Introduction and Preliminaries\n\n\n2, Simple Manipulations; Numbers and Vectors\n\n\n3, Objects, their Modes and Attributes\n\n\n4, Ordered and Unordered Factors\n\n\n5, Arrays and Matrices\n\n\n6, Lists and Data Frames\n\n\n7, Reading/Writing Data from/to Files (Input/Output)\n\n\n8, Probability Distributions\n\n\n9, Grouping, Loops and Conditional Execution\n\n\n10, Writing you own Functions\n\n\n11, Statistical models in R\n\n\n12, Graphical Procedures\n\n\n13, Packages\n\n\n14, OS Facilities\n\n\n\n\n\n\n\n\n\n\n\n\n1, Introduction and Preliminaries\n\n\n\n\nRun R (CLI).\n\n\nQuit with \nq()\n.\n\n\n\n\n\n\nRun R in an IDE (GUI); like RStudio.\n\n\nCreate a working directory \nwork\n.\n\n\nAsk help.\n\n\nhelp(function)\n; open a web documentation in a browser or in the IDE.\n\n\n?function\n; idem.\n\n\n??function\n; idem, but showing concordances.\n\n\nhelp(\"[[\")\n; idem, searching with a string.\n\n\nhelp.start()\n; show the entire manual.\n\n\n\n\n\n\nsink()\n; divert output from the console to a connection; restore the output to the console.\n\n\nobjects()\n, \nls()\n; see the objects stored in a session.\n\n\nObjects are in a file with \n.RData\n extension.\n\n\n\n\n\n\nrm(x, y, ink, ...)\n; remove stored objects.\n\n\nAll commands entered or run are recorded in a file with \n.Rhistory\n extension.\n\n\n\n\n2, Simple Manipulations; Numbers and Vectors\n\n\nCreate a vector\n\n\nx \n- c(1, 2) # assignment (universal).\nx\n[1] 1 2\n\nc(2, 1) -\n y # alternative assignment.\ny\n[1] 2 1\n\nx = c(1, 2) # alternative assignment (some limitations).\nx \n- c(1, 2) # permanent assignment.\n\n# examples\nab \n- 9\nab\n[1] 9\n\nassign(\nab\n, 10)\nab \n[1] 10\n\n\n\n\nCreate a sequence (vector)\n\n\nx \n- 2 * 1:15\n\nx\n[1]  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30\n\nn \n- 10\nx \n- 1:n-1\n\nx\n[1] 1 2 3 4 5 6 7 8 9\n\nx \n- 30:1\nx\n[1] 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3\n[29]  2  1\n\nseq(from = 1, to = 30)\n[1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\n[29] 29 30\n\nseq(1, 30)\n[1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\n[29] 29 30\n\nseq(30, 1)\n[1] 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3\n[29]  2  1\n\nseq(1, 30, by = 2)\n[1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29\n\n\n\n\nRepetition\n\n\nrep(2, times = 5)\n[1] 2 2 2 2 2\n\n\n\n\nx \n- c(\nx\n, \ny\n)[rep(c(1, 2, 2, 1), times = 4)]\n\nx\n[1] \nx\n \ny\n \ny\n \nx\n \nx\n \ny\n \ny\n \nx\n \nx\n \ny\n \ny\n \nx\n \nx\n \ny\n \ny\n \nx\n\n\n\n\n\nLength (vector)\n\n\n\n\nlength(vector)\n\n\n\n\nBoolean\n\n\n\n\nTRUE\n or \nT\n; \nT == 1\n.\n\n\nFALSE\n or \nF\n; \nF == 0\n.\n\n\n\n\nSome operators\n\n\n\n\n\n\n=\n\n\n\n\n=\n\n\n==\n\n\n!=\n\n\n\n\n\n\n\n\n|\n\n\n||\n\n\nand many more.\n\n\n\n\nMissing data and more\n\n\n\n\nNA; not available.\n\n\nNaN; not a number.\n\n\nInf - Inf == NaN == 0/0; infinite number.\n\n\n\n\nx \n- c(1:3, NA)\n\nx\n[1] 1 2 3 NA\n\n\n\n\n\n\nis.na(var)\n.\n\n\nvar == NA\n.\n\n\nis.na(x)\n.\n\n\n!is.na(x)\n.\n\n\n\n\nx \n- c(-1:3, NA)\ny \n- x[!is.na(x) \n x \n 0]\n\nx\n[1]  -1  0  1  2  3 NA\n\ny\n[1] 1 2 3\n\n\n\n\nExtract, subset (vector)\n\n\n\n\nx[i]\n; index.\n\n\n\n\nBackslash use for some characters\n\n\n\n\n\\\\\n; backslash.\n\n\n\\n\n; new line.\n\n\n\\t\n; tab.\n\n\n\\b\n; backspace.\n\n\n\n\nConcatenate, paste (vector)\n\n\nlabs \n- paste(c(\nX\n, \nY\n), 1:10, sep = \n)\n\nlabs\n[1] \nX1\n  \nY2\n  \nX3\n  \nY4\n  \nX5\n  \nY6\n  \nX7\n  \nY8\n  \nX9\n  \nY10\n\n\n\n\n\nA note of data handling and manipulations\n\n\nYou can also \nsplit()\n, \nmerge()\n, \nrbind()\n, \ncbind()\n vectors. \n\n\nIt is also possible with other objects such as factors, lists, arrays, matrices, and data frames.\n\n\nThere are built-in functions to extract, exclude, subset, replace, transform or convert (\n.as\n), concatenate, paste, group, and bind.\n\n\n\\sub\nslice, extract, exclude, subset, replace, convert,  concatenate, paste, group, bind,   \n\n\nExclude, remove (vector)\n\n\nz \n- 1:20\n\nz\n[1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\nzz \n- z[-(1:5)]\n\nzz\n[1]  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\n\n\n\nReplace (vector)\n\n\nx \n- c(1, 1, 1, NA)\n\nx\n[1]  1  1  1 NA\n\nx[is.na(x)] \n- 0\n\nx\n[1] 1 1 1 0\n# replaces any missing values in x by zeros\n\n\n\n\nAbsolute value\n\n\n\n\ny \n- abs(y)\n.\n\n\n\n\nConvert (\n.as\n)\n\n\n\n\nas.vector()\n.\n\n\nas.integer()\n.\n\n\nas.numeric()\n\n\nas.factor()\n.\n\n\nas.character()\n.\n\n\nand many more.\n\n\n\n\n3, Objects, their Modes and Attributes\n\n\nObject type\n\n\nobj \n- 1\n\nobj1 \n- numeric(obj)\nmode(obj1)\n[1] \nnumeric\n\nobj2 \n- character(obj)\nmode(obj2)\n[1] \ncharacter\n\n\nx \n- 1\n\n# class() != mode(), but almost\nmode(x)\n[1] \nnumeric\n\n\nx \n- factor(x)\nx\n[1] 1\nLevels: 1\n\nx \n- numeric(x)\nx\n[1] 0\n\n# load key:value\nobj[3] \n- 17\n\nobj\n[1]  1 NA 17\n\n\n\n\nClasses\n\n\nclass\n\\sub\n\n\n\n\nnumeric\n.\n\n\nlogical\n.\n\n\ncharacter\n.\n\n\nlist\n.\n\n\nmatrix\n.\n\n\narray\n.\n\n\nfactor\n.\n\n\ndata.frame\n.\n\n\n\n\nclass(obj)\n[1] \nnumeric\n\n\n# print the object as ordinary\nunclass(obj)\n[1]  1 NA 17\n\n\n\n\n4, Ordered and Unordered Factors\n\n\nstate \n- c(\ntas\n,\nqld\n,\nsa\n,\nsa\n,\nsa\n,\nvic\n,\nnt\n,\nact\n,\nqld\n,\nnsw\n,\nwa\n,\nnsw\n,\nnsw\n,\nvic\n,\nvic\n,\nvic\n,\nnsw\n,\nqld\n,\nqld\n,\nvic\n,\nnt\n,\nwa\n,\nwa\n,\nqld\n,\nsa\n, \ntas\n,\nnsw\n, \nnsw\n, \nwa\n,\nact\n)\n\nstatef \n- factor(state)\n\n# class != mode()\nclass(statef)\n[1] \nfactor\n\nmode(statef)\n[1] \nnumeric\n\n\nlevels(statef)\n[1] \nact\n \nnsw\n \nnt\n  \nqld\n \nsa\n  \ntas\n \nvic\n \nwa\n \n\nincomes \n- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43)\n\nincmeans \n- tapply(incomes, statef, mean)\n\nincmeans\n  act   nsw    nt   qld    sa   tas   vic    wa \n48.50 55.00 54.00 51.60 54.25 53.00 61.60 54.50 \n\nstderr \n- function(x) { sqrt(var(x) / length(x)) }\n\nstderr(incomes)\n[1] 1.524462\n\n# alternatively\nincster \n- tapply(incomes, statef, stderr)\n\nincster\n      act       nsw        nt       qld        sa       tas       vic        wa \n5.5000000 3.9665266 5.0000000 2.6570661 5.3909647 7.0000000 0.8717798 6.2249498  \n\n\n\n\n# a vector of characters\nstateff \n- c(\na\n, \nb\n, \nc\n)\n[1] \na\n \nb\n \nc\n\n\nas.factor(stateff)\n[1] a b c\nLevels: a b c\n\n\n\n\n# Create a factor with the wrong order of levels\nsizes \n- factor(c(\nsmall\n, \nlarge\n, \nlarge\n, \nsmall\n, \nmedium\n))\n\nsizes\n[1] small  large  large  small  medium\nLevels: large medium small\n\n# levels can be specified explicitly\nsizes \n- factor(sizes, levels = c(\nsmall\n, \nmedium\n, \nlarge\n))\n\nsizes\n[1] small  large  large  small  medium\nLevels: small medium large\n\n# do the same with an ordered factor\nsizes \n- ordered(c(\nsmall\n, \nlarge\n, \nlarge\n, \nsmall\n, \nmedium\n))\n\nsizes \n- ordered(sizes, levels = c(\nsmall\n, \nmedium\n, \nlarge\n))\n\nsizes\n[1] small  large  large  small  medium\nLevels: small \n medium \n large\n\n# use relevel() to make a particular level first in the list. (This will not work for ordered factors.)\n\n# Create a factor with the wrong order\nsizes\n[1] small  large  large  small  medium\nLevels: large medium small\n\n# make medium first\nsizes \n- relevel(sizes, \nmedium\n)\n\nsizes\n[1] small  large  large  small  medium\nLevels: medium large small\n\n# make small first\nsizes \n- relevel(sizes, \nsmall\n)\n\nsizes\n[1] small  large  large  small  medium\nLevels: small medium large\n\n# specify the proper order when the factor is created\nsizes \n- factor(c(\nsmall\n, \nlarge\n, \nlarge\n, \nsmall\n, \nmedium\n),\n                  levels = c(\nsmall\n, \nmedium\n, \nlarge\n))\n\nsizes\n[1] small  large  large  small  medium\nLevels: small medium large\n\n# Create a factor with the wrong order of levels\nsizes \n- factor(c(\nsmall\n, \nlarge\n, \nlarge\n, \nsmall\n, \nmedium\n))\n\nsizes\n[1] small  large  large  small  medium\nLevels: large medium small\n\n# reverse the order of levels in a factor\nsizes \n- factor(sizes, levels=rev(levels(sizes)))\n\nsizes\n[1] small  large  large  small  medium\nLevels: small medium large\n\n\n\n\nConvert (\n.as\n)\n\n\n\n\nas.factor()\n.\n\n\n\n\n5, Arrays and Matrices\n\n\nDimension\n\n\nz \n- 1:1500\ndim(z) \n- c(3, 5, 100)\n\n# gives 100 arrays of 3 lines by 5 columns\n\n\n\n\nCreate a matrix, an array\n\n\nx \n- array(1:20, dim=c(4, 5))\n\nx\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    5    9   13   17\n[2,]    2    6   10   14   18\n[3,]    3    7   11   15   19\n[4,]    4    8   12   16   20\n\nx \n- array(1:20, dim=c(2, 5, 2))\n\nx\n, , 1\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n, , 2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   11   13   15   17   19\n[2,]   12   14   16   18   20\n\n\ni \n- array(c(1:3, 3:1), dim = c(3, 2))\n\ni\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    2\n[3,]    3    1\n\nj \n- array(c(1:8), dim = c(2, 2, 2))\n\nj\n, , 1\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n, , 2\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n\n\nk \n- array(1:27, c(3, 3, 3))\n\n\n k\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]   10   13   16\n[2,]   11   14   17\n[3,]   12   15   18\n\n, , 3\n\n     [,1] [,2] [,3]\n[1,]   19   22   25\n[2,]   20   23   26\n[3,]   21   24   27\n\n\na \n- matrix(1, 2, 2)\n\na\n     [,1] [,2]\n[1,]    1    1\n[2,]    1    1\n\nb \n- matrix(2, 2, 2)\n\nb\n     [,1] [,2]\n[1,]    2    2\n[2,]    2    2\n\n\n\n\nExtract, subset (matrix)\n\n\n\n\na[2, 1]\n; rows, columns.\n\n\n\n\nExtract, subset (array)\n\n\n\n\na[2, 1, 1]\n; rows, columns, matrix.\n\n\n\n\nCross product vs multiplication\n\n\na \n- 1:5\nb \n- seq(10, 6, -1)\n\na\n[1] 1 2 3 4 5\nb\n[1] 10  9  8  7  6\n\na * b\n[1] 10 18 24 28 30\n\ncrossprod(a, b)\n     [,1]\n[1,]  110\n\nab \n- a %o% b\nab\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   10    9    8    7    6\n[2,]   20   18   16   14   12\n[3,]   30   27   24   21   18\n[4,]   40   36   32   28   24\n[5,]   50   45   40   35   30\n\n\n\n\nMatrix operation\n\n\nA et B are 2x2 matrices:\n\n\n\n\nA * B\n; scalar multiplication.\n\n\nA %*% B\n; matrix multiplication\n\n\nx %*% A %*% y\n; matrix multiplication.\n\n\ncrossproduct(A, B)\n; cross multiplication.\n\n\nab \n- outer(A,B,\"*\")\n; \na * b\n.\n\n\nab \n- outer(A,B,\"+\")\n; \na + b\n.\n\n\nab \n- outer(A,B,\"-\")\n; \na - b\n.\n\n\nand many more.\n\n\n\n\nDiagonal and triangle\n\n\nab\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   11   10    9    8    7\n[2,]   12   11   10    9    8\n[3,]   13   12   11   10    9\n[4,]   14   13   12   11   10\n[5,]   15   14   13   12   11\n\ndiag(ab)\n[1] 11 11 11 11 11\n\nlower.tri(ab)\n      [,1]  [,2]  [,3]  [,4]  [,5]\n[1,] FALSE FALSE FALSE FALSE FALSE\n[2,]  TRUE FALSE FALSE FALSE FALSE\n[3,]  TRUE  TRUE FALSE FALSE FALSE\n[4,]  TRUE  TRUE  TRUE FALSE FALSE\n[5,]  TRUE  TRUE  TRUE  TRUE FALSE\n\nlower.tri(ab) * ab\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    0    0    0    0    0\n[2,]   12    0    0    0    0\n[3,]   13   12    0    0    0\n[4,]   14   13   12    0    0\n[5,]   15   14   13   12    0\n\nupper.tri(ab)\n      [,1]  [,2]  [,3]  [,4]  [,5]\n[1,] FALSE  TRUE  TRUE  TRUE  TRUE\n[2,] FALSE FALSE  TRUE  TRUE  TRUE\n[3,] FALSE FALSE FALSE  TRUE  TRUE\n[4,] FALSE FALSE FALSE FALSE  TRUE\n[5,] FALSE FALSE FALSE FALSE FALSE\n\nupper.tri(ab) * ab\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    0   10    9    8    7\n[2,]    0    0   10    9    8\n[3,]    0    0    0   10    9\n[4,]    0    0    0    0   10\n[5,]    0    0    0    0    0\n\n\n\n\nSolving a matrix system\n\n\nb \n- A %*% x\n\n# or\nsolve(A, b)\n\n\n\n\n\n\nsolve(A)\n; inverse the matrix.\n\n\n\n\nSymmetrical matrix and eigen value\n\n\nb \n- matrix(2, 2, 2)\n\nb\n     [,1] [,2]\n[1,]    2    2\n[2,]    2    2\n\ne \n- eigen(b, only.values = TRUE)\ne\n$values\n[1] 4 0\n\n$vectors\nNULL\n\n\n\n\nSingular value decomposition (matrix)\n\n\nsvd(b)\n$d\n[1] 4 0\n\n$u\n           [,1]       [,2]\n[1,] -0.7071068 -0.7071068\n[2,] -0.7071068  0.7071068\n\n$v\n           [,1]       [,2]\n[1,] -0.7071068 -0.7071068\n[2,] -0.7071068  0.7071068\n\n\n\n\nDeterminant (matrix)\n\n\ndet(ab)\n[1] 0\n\n\n\n\nLeast square fitting (matrix)\n\n\n\n\nlsfit()\n or least squares estimate of \nb\n in the model: \ny = X b + e\n.\n\n\n\n\nQR decomposition (matrix)\n\n\nqr(ab)\n$qr\n            [,1]        [,2]          [,3]          [,4]          [,5]\n[1,] -29.2403830 -27.0174299 -2.479448e+01 -2.257152e+01 -2.034857e+01\n[2,]   0.4103913   0.2418254  4.836508e-01  7.254763e-01  9.673017e-01\n[3,]   0.4445906  -0.1703815  3.717512e-15  1.134003e-14  1.749210e-14\n[4,]   0.4787899  -0.5015812  3.957070e-01  1.553722e-15  1.295516e-15\n[5,]   0.5129892  -0.8327809  5.076995e-01  6.936403e-01 -1.685698e-16\n\n$rank\n[1] 2\n\n$qraux\n[1] 1.376192e+00 1.160818e+00 1.765282e+00 1.720322e+00 1.685698e-16\n\n$pivot\n[1] 1 2 3 4 5\n\nattr(,\nclass\n)\n[1] \nqr\n\n\n\n\n\nAlso:\n\n\n\n\nqr.coef()\n.\n\n\nqr.fitted()\n.\n\n\nqr.resid()\n.\n\n\n\n\nConvert (\n.as\n)\n\n\n\n\nas.array()\n.\n\n\nas.matrix()\n.\n\n\n\n\n6, Lists and Data Frames\n\n\nCrate a list\n\n\nLst \n- list(name = \nFred\n, wife = \nMary\n, no.children = 3, child.ages = c(4,7,9))\n\nLst\n$name\n[1] \nFred\n\n\n$wife\n[1] \nMary\n\n\n$no.children\n[1] 3\n\n$child.ages\n[1] 4 7 9\n\n\n\n\nExtract, subset (list)\n\n\nLst$name\n[1] \nFred\n\n\nLst[[\nname\n]] == Lst[[1]]\n[1] TRUE\n\n\nLst[5] \n- list(\n) # or list()  \nLst[\nnew\n] \n- list()  # key, value\n\nLst[1]\n$name\n[1] \nFred\n\n\nLst$child.ages[1]\n[1] 4\nLst[[4]][1]\n[1] 4\n\n\n\n\nConcatenate, paste\n\n\nx \n- c(1,2)\ny \n- c(3,4)\n\nc(x, y)\n[1] 1 2 3 4\n\npaste(x, y)\n[1] \n1 3\n \n2 4\n\n\ndata.frame(x, y)\n  x y\n1 1 3\n2 2 4\n\na \n- list(1, 2)\nb \n- list(\na\n, \nb\n)\n\nlist(a, b)\n[[1]]\n[[1]][[1]]\n[1] 1\n\n[[1]][[2]]\n[1] 2\n\n\n[[2]]\n[[2]][[1]]\n[1] \na\n\n\n[[2]][[2]]\n[1] \nb\n\n\nh \n- matrix(2, 2, 2)\ng \n- matrix(1, 2, 2)\n\nc(h, g)\n[1] 2 2 2 2 1 1 1 1\n\npaste(h, g)\n[1] \n2 1\n \n2 1\n \n2 1\n \n2 1\n\n\nlist(h, g)\n[[1]]\n     [,1] [,2]\n[1,]    2    2\n[2,]    2    2\n\n[[2]]\n     [,1] [,2]\n[1,]    1    1\n[2,]    1    1\n\n\n\n\nConvert (\nas.\n)\n\n\n\n\nas.matrix()\n\n\n\n\nData frame\n\n\n\n\nA data frame can hold other data frames.\n\n\nA list can hold other lists.\n\n\nA vector can hold other vectors.\n\n\n\n\n\n\nEach variable can be numeric, character, logical, factor, numeric matrix, list, data.frame.\n\n\n\n\nstate \n- c(\ntas\n,\nqld\n,\nsa\n,\nsa\n,\nsa\n,\nvic\n,\nnt\n,\nact\n,\nqld\n,\nnsw\n,\nwa\n,\nnsw\n,\nnsw\n,\nvic\n,\nvic\n,\nvic\n,\nnsw\n,\nqld\n,\nqld\n,\nvic\n,\nnt\n,\nwa\n,\nwa\n,\nqld\n,\nsa\n, \ntas\n,\nnsw\n, \nnsw\n, \nwa\n,\nact\n)\n\nstatef \n- factor(state)\n\nincomes \n- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43)\n\nincomef \n- factor(incomes)\n\naccountants \n- data.frame(home=statef, loot=incomes, shot=incomef)\n\nhead(accountants, 10)\n   home loot shot\n1   tas   60   60\n2   qld   49   49\n3    sa   40   40\n4    sa   61   61\n5    sa   64   64\n6   vic   60   60\n7    nt   59   59\n8   act   54   54\n9   qld   62   62\n10  nsw   69   69\n\n# class() != mode()\nclass(accountants)\n[1] \ndata.frame\n\n\nmode(accountants)\n[1] \nlist\n\n\n\n\n\nConcatenate, paste (data frame)\n\n\n# accountants == acc\n\nc(accountants, acc)\n$home\n [1] tas qld sa  sa  sa  vic nt  act qld nsw wa  nsw nsw\n[14] vic vic vic nsw qld qld vic nt  wa  wa  qld sa  tas\n[27] nsw nsw wa  act\nLevels: act nsw nt qld sa tas vic wa\n\n$loot\n [1] 60 49 40 61 64 60 59 54 62 69 70 42 56 61 61 61 58 51\n[19] 48 65 49 49 41 48 52 46 59 46 58 43\n\n$shot\n [1] 60 49 40 61 64 60 59 54 62 69 70 42 56 61 61 61 58 51\n[19] 48 65 49 49 41 48 52 46 59 46 58 43\n20 Levels: 40 41 42 43 46 48 49 51 52 54 56 58 59 ... 70\n\n$home\n [1] tas qld sa  sa  sa  vic nt  act qld nsw wa  nsw nsw\n[14] vic vic vic nsw qld qld vic nt  wa  wa  qld sa  tas\n[27] nsw nsw wa  act\nLevels: act nsw nt qld sa tas vic wa\n\n$loot\n [1] 60 49 40 61 64 60 59 54 62 69 70 42 56 61 61 61 58 51\n[19] 48 65 49 49 41 48 52 46 59 46 58 43\n\n$shot\n [1] 60 49 40 61 64 60 59 54 62 69 70 42 56 61 61 61 58 51\n[19] 48 65 49 49 41 48 52 46 59 46 58 43\n20 Levels: 40 41 42 43 46 48 49 51 52 54 56 58 59 ... 70\n\n\npaste(accountants, acc)\n[1] \nc(6, 4, 5, 5, 5, 7, 3, 1, 4, 2, 8, 2, 2, 7, 7, 7, 2, 4, 4, 7, 3, 8, 8, 4, 5, 6, 2, 2, 8, 1) c(6, 4, 5, 5, 5, 7, 3, 1, 4, 2, 8, 2, 2, 7, 7, 7, 2, 4, 4, 7, 3, 8, 8, 4, 5, 6, 2, 2, 8, 1)\n                                                            \n[2] \nc(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43) c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43)\n\n[3] \nc(14, 7, 1, 15, 17, 14, 13, 10, 16, 19, 20, 3, 11, 15, 15, 15, 12, 8, 6, 18, 7, 7, 2, 6, 9, 5, 13, 5, 12, 4) c(14, 7, 1, 15, 17, 14, 13, 10, 16, 19, 20, 3, 11, 15, 15, 15, 12, 8, 6, 18, 7, 7, 2, 6, 9, 5, 13, 5, 12, 4)\n                          \n\nlist(accountants, acc)\n[[1]]\n   home loot shot\n1   tas   60   60\n2   qld   49   49\n3    sa   40   40\n4    sa   61   61\n5    sa   64   64\n6   vic   60   60\n7    nt   59   59\n8   act   54   54\n9   qld   62   62\n10  nsw   69   69\n...\n\n[[2]]\n   home loot shot\n1   tas   60   60\n2   qld   49   49\n3    sa   40   40\n4    sa   61   61\n5    sa   64   64\n6   vic   60   60\n7    nt   59   59\n8   act   54   54\n9   qld   62   62\n10  nsw   69   69\n...\n\naccountants + acc\n   home loot shot\n1    NA  120   NA\n2    NA   98   NA\n3    NA   80   NA\n4    NA  122   NA\n5    NA  128   NA\n6    NA  120   NA\n7    NA  118   NA\n8    NA  108   NA\n9    NA  124   NA\n10   NA  138   NA\n...\n\n\n\n\nConvert (\nas.\n)\n\n\n\n\nas.data.frame()\n\n\n\n\nLoad data into R\n\n\n\n\nread.table()\n; produce a data frame with inputs.\n\n\n\n\nA note on environment objects\n\n\n\n\nsearch()\n; objects in .GlobalEnv; including packages.\n\n\nls()\n; list these objects.\n\n\n\n\n\n\nattach()\n; attach an object to .GlobalEnv.\n\n\ndetach()\n.\n\n\n\n\n7, Reading/Writing Data from/to Files (Input/Output)\n\n\nA lot more can be found on I/O: depending on the file type, the data format, the desired R object, many commands are available. Depending on a file format, look for the dedicated package on CRAN.\n\n\nread, reading, write, writing, input, output, i/o\n\\sub\n\n\nExamples\n\n\n# read from a file\nHousePrice \n- read.table(\nhouse.data\n, header = TRUE, sep = \n;\n)\n\n# read a 3-variable list\ninput \n- scan(\ninput.dat\n, list(\n, 0, 0))  \n\n# read a3-variable list\ninput \n- scan(\ninput.dat\n, list(id=\n, x = 0, y = 0))\n\n# make 3 separate vectors\nlabel \n- input[[1]]\nx \n- input[[2]]\ny \n- input[[3]]\n\n# label them\nlabel \n- inp$id\nx \n- inp$x\ny \n- inp$y\n\n# read a 5-variable list and transform it into a matrix\nX \n- matrix(scan(\nlight.dat\n, 0), ncol = 5, byrow = TRUE)\n\n\n\n\nInputing from file types\n\n\n\n\n.txt.\n\n\n.csv.\n\n\n.tsv.\n\n\n.hdf5.\n\n\n.bmp.\n\n\n.jpeg.\n\n\n.png.\n\n\n.tiff.\n\n\n.zip.\n\n\n.xls, spreadsheet.\n\n\ndatabases.\n\n\nstatistical programs.\n\n\nbinary files.\n\n\nand many more (some are up and coming such as julia files).\n\n\n\n\nCleaning parameter\n\n\n\n\nstrip.white = TRUE\n; remove unnecessary spaces.\n\n\n\n\nChange the data frame or matrix format\n\n\n\n\nstack()\n; for example, take a 6-column, 4-variable data frame and stack the 4 variables into one long column.\n\n\nunstack()\n; vice-versa.\n\n\n\n\n# 6 columns or variables\nStatus Age  V1    V2    V3    V4\n P 23646 45190 50333 55166 56271\nCC 26174 35535 38227 37911 41184\nCC 27723 25691 25712 26144 26398\nCC 27193 30949 29693 29754 30772\nCC 24370 50542 51966 54341 54273\nCC 28359 58591 58803 59435 61292\nCC 25136 45801 45389 47197 47126\n...\n\n# 4 columns, more rows\nStatus Age values ind\nX1  P 23646 45190 V1\nX2 CC 26174 35535 V1\nX3 CC 27723 25691 V1\nX4 CC 27193 30949 V1\nX5 CC 24370 50542 V1\nX6 CC 28359 58591 V1\nX7 CC 25136 45801 V1\nX11 P 23646 50333 V2\n...\n\n\n\n\n\n\nreshape()\n; stack and unstack variables, according to parameters.\n\n\n\n\nreshape(zz, idvar = \nid\n, timevar = \nvar\n, varying = list(c(\nV1\n, \nV2\n, \nV3\n, \nV4\n)), direction = \nlong\n)\n\n\n\n\n\n\nftable()\n; flatten multidimensional matrices (arrays);\n\n\nread.ftable()\n.\n\n\ndata()\n; list of datasets.\n\n\ndata(package = \"rpart\")\n; load package.\n\n\nedit(input)\n; open a mini-spreadsheet.\n\n\nxnew \n- edit(input)\n; open and save it as a new dataset.\n\n\nand many more.\n\n\n\n\nEncoding\n\n\n\n\nutf-8 for Linux and OS X.\n\n\nUCS-2LE and UTF-16 for Windows.\n\n\n\n\n# examples\nreadLines(\nfilename.txt\n, encoding = \nUTF-8\n)\nreadLines(\nfilename.txt\n, encoding = \nUCS2LE\n)\nread.delim(\nclipboard\n, fileEncoding=\nUTF-16\n)\n\n\n\n\nOutput\n\n\n\n\nwrite.table()\n; many parameters.\n\n\nwrite.matrix()\n.\n\n\nwrite.foreign()\n.\n\n\n\n\nCheck a file\n\n\n\n\nreadLines(\"aab.txt\")\n.\n\n\nreadLines(\"aab.txt\", 1)\n.\n\n\nunlink(\"aab.txt\")\n; delete the file on the working directory.\n\n\n\n\nDirectory management\n\n\n\n\ngetwd()\n; get the current working directory.\n\n\nsetwd()\n; set the current working directory.\n\n\nfile.show(filepath)\n.\n\n\nsystem.file()\n\n\n\n\nSpreadsheet editor and edition in R\n\n\n\n\nfix(c)\n; edit object c; a vetor, list, data frame, etc. in a mini-spreadsheet.\n\n\ndata.entry(c, mode=NULL, Names=NULL), dataentry(c), de(c, Modes=list(), Names=NULL)\n; idem.\n\n\nvi(file= )\n; invoke a text editor.\n\n\nemacs(file= )\n; idem.\n\n\npico(file= )\n; idem.\n\n\nxemacs(file= )\n; idem.\n\n\nxedit(file=)\n; idem.\n\n\n\n\n8, Probability Distributions\n\n\nDistribution\n\n\n\n\nbeta\n.\n\n\nbinom\n.\n\n\ncauchy\n.\n\n\nchisq\n.\n\n\nexp\n.\n\n\nf\n.\n\n\ngamma\n.\n\n\ngeom\n.\n\n\nhyper\n.\n\n\nlnorm\n.\n\n\nlogis\n.\n\n\nnbinom\n.\n\n\nnorm\n.\n\n\npois\n.\n\n\nsignrank\n.\n\n\nt\n.\n\n\nunif\n.\n\n\nweibull\n.\n\n\nwilcox\n.\n\n\nand many more.\n\n\n\n\nPrefixes\n\n\n\n\nd\n; density.\n\n\np\n; CDF or cumulative density function.\n\n\nq\n; quantile.\n\n\nr\n; random deviates or simulation or number generation.\n\n\n\n\nDistribution operation\n\n\nCommands, prefix + distribution, examples:\n\n\n\n\ndbeta(x= )\n.\n\n\npbinom(q= , lower.tail= , log.p= )\n.\n\n\nqcauchy(p= , lower.tail= , log.p= )\n.\n\n\nrchisq(n or r= )\n.\n\n\nptukey()\n; studentized (t) distribution\n\n\nqtukey()\n.\n\n\ndmultinom()\n.\n\n\nltinomial\n.\n\n\nrmultinom()\n.\n\n\netc.\n\n\n\n\nDescriptive statistics\n\n\n# overview\nsummary(cars)\nstr(cars)\nboxplot(cars$speed)\nboxplot(cars$dist)\n\n# Tukey five-number summaries\nfivenum(cars$speed)\n\n# histograms and bar charts\nstem(cars$speed)\nhist(cars$speed)\nbarplot(cars$speed)\ndotchart(cars$speed)\n\n# scatter plot\nplot(cars$speed, cars$dist)\nlines(cars$speed, cars$dist)\n\n# add a (1-d) representation\nplot(cars$speed, cars$dist)\nrug(cars$speed, ticksize = 0.03)\nplot(cars$speed, cars$dist)\nrug(cars$dist, ticksize = 0.03)\n\n# normality of the residuals, linearity\nqqnorm(cars$speed)\nqqline(cars$speed)\n\nqqnorm(cars$dist)\nqqline(cars$dist)\n\nqqplot(cars$speed, cars$dist)\n\n# normality test\nshapiro.test(cars$speed)\n\n# Kolmogorov-Smirnov test on a sample\nks.test(cars$speed[10], \npnorm\n, mean = mean(cars$speed), sd = sqrt(var(cars$speed)))\nks.test(cars$speed[40], \npnorm\n, mean = mean(cars$speed), sd = sqrt(var(cars$speed)))\n\n\n\n\nTest\n\n\n\n\nt.test(A,B)\n; true difference of means is not 0, difference means.\n\n\nvar.test(A,B)\n; true ratio of variances is not 1, difference variances.\n\n\nt.test(A,B, var.equal=TRUE)\n; true difference of means is not 0.\n\n\nwilcox.test(A,B)\n; rank sum with continuity correction, continuous distribution.\n\n\nand many more.\n\n\n\n\nNormality\n\n\n\n\nplot(ecdf(A), do.points=FALSE, verticals=TRUE, xlim=range(A, B))\n\n\nplot(ecdf(B), do.points=FALSE, verticals=TRUE, add=TRUE)\n\n\nks.test(A,B); maximal vertical distance between the two ecdf\n\n\n\n\n9, Grouping, Loops and Conditional Execution\n\n\n\n\n; AND.\n\n\n; AND; evaluates left to right, examining only the first element of each vector.\n\n\n|\n; OR.\n\n\n||\n; OR; evaluates left to right, examining only the first element of each vector.\n\n\nxor()\n; elementwise exclusive OR.\n\n\nisTRUE(x)\n; is true if and only if x is a length-one logical vector whose only element is TRUE and which has no attributes.\n\n\nifelse(condition, a, b)\n; if \ncondition\n is proven true, return \na\n, or else, return \nb\n.\n\n\n\n\nLoop\n\n\nlooping\n\\sub\n\n\n\n\nfor(var in seq) expr\n.\n\n\nwhile(condition is true) expr\n.\n\n\nrepeat expr\n.\n\n\nbreak\n; break out of a for, while or repeat loop; control is transferred to the first statement outside the inner-most loop.\n\n\nnext\n; halt the processing of the current iteration and advance the looping index.\n\n\n\n\n10, Writing you own Functions\n\n\nSimple custom function\n\n\n# define\nmyfunction \n- function(arg1, arg2, ...){\nstatements\nreturn(object)\n}\n\n# call\nmyfunction(arg1, arg2, ...)\n\n\n\n\nIt is possible to remplace function arguments with variables and objects.\n\n\nComplex custom function\n\n\nInvolve conditions and loops.\n\n\ntwosam \n- function(y1, y2) {\n    n1 \n- length(y1); n2 \n- length(y2)\n    yb1 \n- mean(y1);\n    yb2 \n- mean(y2)\n    s1 \n- var(y1);\n    s2 \n- var(y2)\n    s \n- ((n1 - 1) * s1 + (n2-1) * s2) / (n1 + n2 - 2)\n    tst \n- (yb1 - yb2) / sqrt(s * (1 / n1 + 1 / n2))\n    tst\n}\n\n\n\n\nDefine and call on the same line\n\n\n\n\ntstat \n- twosam(data$male, data$female); tstat\n\n\n\n\nSeveral commands and functions can be called on the same line with:\n\n\n\n\ncommand1; command2; function1; function2\n \n\n\n\n\nTwo ways of defining and calling a function\n\n\nmulty \n- function(x, y) {\n    x * y\n    }\n\n# with a binary operator\n\n%!%\n \n- function(x, y) {\n    x * y\n    }\n\nx \n- 2\ny \n- 2\n\nmulty(x, y)\n[1] 4\n\nx %!% y\n[1] 4\n\n\n\n\n\nMatrix multiplication operator, \n%*%\n, and the outer product matrix operator, \n%o%\n, are other examples of binary operators.\n\n\nFunction in a function\n\n\n# case 1\narea \n- function(f, a, b, eps = 1.0e-06, lim = 10) {\n    fun1 \n- function(f, a, b, fa, fb, a0, eps, lim, fun) {\n        d \n- (a + b)/2\n        h \n- (b - a)/4\n        fd \n- f(d)\n        a1 \n- h * (fa + fd)\n        a2 \n- h * (fd + fb)\n        if(abs(a0 - a1 - a2) \n eps || lim == 0)\n            return(a1 + a2)\n        else {\n            return(fun(f, a, d, fa, fd, a1, eps, lim - 1, fun) \n                fun(f, d, b, fd, fb, a2, eps, lim - 1, fun))\n        }\n    }\n    fa \n- f(a)\n    fb \n- f(b)\n    a0 \n- ((fa + fb) * (b - a))/2\n    fun1(f, a, b, fa, fb, a0, eps, lim, fun1)\n}\n\n# case 2\nf \n- function(x) {\n    y \n- 2*x\n    print(x)\n    print(y)\n    print(z)\n}\n\n# case 3\ncube \n- function(n) {\n    sq \n- function() n*n\n    n*sq()\n}\n\n# case 4\nopen.account \n- function(total) {\n    list(\n        deposit = function(amount) {\n            if(amount \n= 0)\n                stop(\nDeposits must be positive!\\n\n)\n            total \n- total + amount\n            cat(amount, \ndeposited. Your balance is\n, total, \n\\n\\n\n)\n        },\n        withdraw = function(amount) {\n            if(amount \n total)\n                stop(\nYou don\u2019t have that much money!\\n\n)\n            total \n- total - amount\n            cat(amount, \nwithdrawn. Your balance is\n, total, \n\\n\\n\n)\n        },\n        balance = function() {\n            cat(\nYour balance is\n, total, \n\\n\\n\n)\n        }\n    )\n}\n\nross \n- open.account(100)\nrobert \n- open.account(200)\n\nross$withdraw(30)\nross$balance()\nrobert$balance()\nross$deposit(50)\nross$balance()\nross$withdraw(500)\n\n\n\n\nName\n\n\nAdd,  modify, and remove (with \nnames(x) \n- NA or 0\n) names.\n\n\n\n\nnames()\n.\n\n\nrownames()\n.\n\n\ncolnames()\n.\n\n\ndimnames()\n.\n\n\n\n\nCustomizing startup\n\n\nCustomize the R environment through a directory initialization file; commands that you want to execute every time R is started under your system.\n\n\nR will always source the Rprofile.site file first. \n\n\nOn Windows, the file is in C:\\Program Files\\R\\R-n.n.n\\etc. You can also place a .Rprofile file in any directory that you are going to run R from or in the user home directory. \n\n\nIndividual users control over their workspace and allows for different startup procedures in different working directories.\n\n\nIf no .Rprofile file is found in the startup directory, then R looks for a .Rprofile file in the user\u2019s home directory and uses that (if it exists) environment variable R_PROFILE_USER is set. The file it points to is used instead of the .Rprofile files. \n\n\nFunction named .First() in either of the two profile files or in the .RData image has a special status: initialize the environment\n\n\nSequence in which files are executed is:\n\n\n\n\nRprofile.site\n\n\nthe user profile\n\n\n.RData\n\n\n.First()\n\n\n.Last(), if defined, is (normally) executed at the very end of the session.\n\n\n\n\nList function and method\n\n\n\n\nmethods(class = \"data.frame\")\n; list methods associated with the class.\n\n\nmethods(plot)\n; list methods specific to the object.\n\n\n\n\nmethods(class = \ndata.frame\n)\n [1] $             $\n-           [             [[            [[\n-         \n [6] [\n-           aggregate     anyDuplicated as.data.frame as.list      \n[11] as.matrix     by            cbind         coerce        dim          \n[16] dimnames      dimnames\n-    droplevels    duplicated    edit         \n[21] format        formula       head          initialize    is.na        \n[26] Math          merge         na.exclude    na.omit       Ops          \n[31] plot          print         prompt        rbind         row.names    \n[36] row.names\n-   rowsum        show          slotsFromS3   split        \n[41] split\n-       stack         str           subset        summary      \n[46] Summary       t             tail          transform     unique       \n[51] unstack       within       \nsee '?methods' for accessing help and source code\n\nmethods(plot)\n [1] plot.acf*           plot.data.frame*    plot.decomposed.ts*\n [4] plot.default        plot.dendrogram*    plot.density*      \n [7] plot.ecdf           plot.factor*        plot.formula*      \n[10] plot.function       plot.hclust*        plot.histogram*    \n[13] plot.HoltWinters*   plot.isoreg*        plot.lm*           \n[16] plot.medpolish*     plot.mlm*           plot.ppr*          \n[19] plot.prcomp*        plot.princomp*      plot.profile.nls*  \n[22] plot.R6*            plot.raster*        plot.spec*         \n[25] plot.stepfun        plot.stl*           plot.table*        \n[28] plot.ts             plot.tskernel*      plot.TukeyHSD*     \nsee '?methods' for accessing help and source code\n\n\n\n\nDifference:\n\n\n\n\nplot()\n; a generic method.\n\n\nplot.\n ; a specific method such as \nplot.ts()\n for example.\n\n\n\n\n11, Statistical models in R\n\n\nRegression\n\n\ny \n- 1:10\nx \n- 1:10\n\na \n- lm(y \nsub\nx)\na\nCall:\nlm(formula = y \nsub\nx)\n\nCoefficients:\n(Intercept)            x  \n  1.123e-15    1.000e+00  \n\n\n# no intercept, through the origin\nb \n- lm(y \nsub\n0 + x)\nb\nCall:\nlm(formula = y \nsub\n0 + x)\n\nCoefficients:\nx  \n1  \n\n\n# no intercept\nc \n- lm(y \nsub\n-1 + x)\nc\nCall:\nlm(formula = y \nsub\n-1 + x)\n\nCoefficients:\nx  \n1  \n\n\nd \n- lm(y \nsub\nx - 1)\nd\nCall:\nlm(formula = y \nsub\nx - 1)\n\nCoefficients:\nx  \n1  \n\n\n# log\ne \n- lm(log(y) \nsub\nx)\ne\nCall:\nlm(formula = log(y) \nsub\nx)\n\nCoefficients:\n(Intercept)            x  \n     0.2432       0.2304  \n\n\n# quadratic\nf \n- lm(y \nsub\n1 + x + I(x^2))\nf\nCall:\nlm(formula = y \nsub\n1 + x + I(x^2))\n\nCoefficients:\n(Intercept)            x       I(x^2)  \n  1.123e-15    1.000e+00    5.699e-18  \n\n\n# polynomial\ng \n- lm(y \nsub\nX + poly(x, 2))\n\n\n\n# weighted regression\nfm1 \n- lm(y \nsub\nx, data = dummy, weight = 1 / w^2)\n\n\n# and more\nnew.model \n- update(old.model, new.formula)\n\nfm05 \n- lm(y \nsub\nx1 + x2 + x3 + x4 + x5, data = production)\n\nfm6 \n- update(fm06, . \nsub\n. + x6)\nsmf6 \n- update(fm6, sqrt(,) \nsub\n.)\n\n\n\n\nExplore the results\n\n\n\n\nsummary(regression results)\n.\n\n\nvcov()\n; variance-covariance matrix.\n\n\naov(formula, data = data.frame)\n.\n\n\nanova(fitted.model.1, fitted.model.2, ...)\n\n\nand many more.\n\n\n\n\nanova, coeficient, coef, deviance, residuals, effects, formula, model, kappa, labels, plot, predict, proj, projection\n\n\nStepwise Regression\n\n\nSelect a suitable model by adding or dropping variables and preserving hierarchies. The best model with the smallest AIC (Akaike\u2019s Information Criterion) is discovered with the search.\n\n\nGeneralized least squares\n\n\ngls, binomial, logit, probit, log, cloglog, gaussian, identity, log, inverse, gamma, identity, inverse, log, inverse.gaussian, 1/mu^2, identity, inverse, log, poisson, identity, log, sqrt, quasi-likelihood, logit, probit\n\\sub\n\n\nfitted.model \n- glm(formula, famili=family.generator, data = data.frame)\n\n\n\n\nNonlinear least squares\n\n\nnls\n\\sub\n\n\n\n\nnlm(function)\n\n\n\n\nMaximum likehood\n\n\nml\n\\sub\n\n\nWhen errors are not normal.\n\n\n\n\nml(function)\n\n\n\n\nMixed model\n\n\n\n\nnlme\n package.\n\n\n\n\nLocal Approximating Regression\n\n\nNonparametric local regression function.\n\n\n\n\nlrf \n- lowess(x, y)\n.\n\n\n\n\nRobust regression\n\n\nMASS\n package.\n\n\nAdditive model\n\n\n\n\nacepack\n package.\n\n\nmda\n package.\n\n\ngam\n package.\n\n\nmgcv\n package.\n\n\n\n\nTree-based model\n\n\ndecision, classification tree, random forest\n\\sub\n\n\n\n\nrpart\n package.\n\n\ntree\n package.\n\n\n\n\n12, Graphical Procedures\n\n\nwww.statmethods.net/advgraphs\n\n\nGraphic, packages\n\n\n\n\nlattice\n package.\n\n\nggplot2\n package.\n\n\ngrid\n package.\n\n\nggobi\n, \nrgl\n packages; for interactive graphics, 3D, and surfaces.\n\n\nand many more.\n\n\n\n\nBasic plot\n\n\n\n\nplot()\n.\n\n\nboxplot()\n..\n\n\nlines(x,y)\n; add a line to a basic plot.\n\n\npairs()\n; multivariate, pairwise scatterplot matrix. \n\n\ncoplot(a \nsub\nb | c)\n; scatter plot of a \nb given c, a factor vector (levels)\n\n\ncoplot(a \nsub\nv | c + d)\n.\n\n\npie()\n.\n\n\nhist(x)\n; where \nnclass = n\n and \nbreaks = b\n.\n\n\nbarplot()\n; can be horizontal or vertical.\n\n\ndotchart(x, ...)\n; a case of bar chart.\n\n\nand many more with lots of options.\n\n\n\n\nqq plot\n\n\n\n\nqqnorm(x)\n.\n\n\nqqline(x)\n.\n\n\nqqplot(x, y)\n; comparison.\n\n\n\n\nPicture\n\n\n\n\nimage(x, y, z, ...)\n; grid of rectangles with colors corresponding to the values in z.\n\n\ncontour(x, y, z, ...)\n; z add contour lines (even to an existing plot).\n\n\npersp(x, y, z, ...)\n; perspective plots of a surface over the x\u2013y plane.\n\n\n\n\nGraphic arguments and parameters\n\n\nwww.statmethods.net/advgraphs/parameters\n\n\nx1 \n- rnorm(1000, 0.4, 0.8)\nx2 \n- rnorm(1000, 0.0, 1.0)\nx3 \n- rnorm(1000, -1.0, 1.0)\nhist(x1, width = 0.33, offset = 0.00, col = \nblue\n, xlim = c(-4,4),\n     main = \nHistogram of x1, x2 \n x3\n,\n     xlab = \nx1 - blue, x2 - red, x3 - green\n)\nhist(x2, width = 0.33, offset = 0.33, col = \nred\n, add = TRUE)\nhist(x3, width = 0.33, offset = 0.66, col = \ngreen\n, add = TRUE)\n\n\n\n\n\n\nadd = TRUE\n; superimpose a plot on another plot.\n\n\naxes = FALSE\n; no axes.\n\n\naxis(side,...)\n; 1 to 4, bottom, left, top, right.\n\n\nlog = \"x\", \"y\", \"xy\"\n; difference scale.\n\n\ntype = \"p\"\n (points); \n\"l\"\n (lines), \n\"b\"\n (p+l), \n\"o\"\n (l+p), \n\"h\"\n (vertical lines from points to the zero axis), \n\"s\"\n (step-function), \n\"n\"\n (not plotting).\n\n\nxlab = \"bla\"\n.\n\n\nylab = \"bla\"\n.\n\n\nmain = \"bla\"\n.\n\n\nsub = \"bla\"\n.\n\n\ntitle(main, sub)\n.\n\n\npoints(x, y)\n; add points on top of \nplot()\n.\n\n\ntext(x, y, labels,...)\n; add text to each point.\n\n\nplot(x, t, type = \"n\"); text(x, y, names)\n; replace the dot with text.\n\n\nabline(a, b)\n; add a line.\n\n\nabline(0, 1, lty = 3)\n.\n\n\nabline(coef(fm))\n.\n\n\nabline(coef(fm1), col = \"red\")\n.\n\n\nabline(h = y)\n; or \nh = value\n; add a horizontal line.\n\n\nabline(v = x)\n; or \nv = value\n; add a vertical line.\n\n\nabline(lm.obj)\n.\n\n\nlegend(x, y, legend, ...)\n; add a legend at a specified position.\n\n\nfill = v\n; add a vector of the same length as a legend.\n\n\nlty = 2\n; line style.\n\n\nlwd = 1.5\n; line width.\n\n\npch = 0\n; dot style.\n\n\npar()\n; list of permanent graphic parameters.\n\n\npar(c(\"col\", \"lty\"))\n; limit the list of parameters.\n\n\npar(col = 4, lty = 2)\n; set the parameters for all plots.\n\n\nplot(x, y, pch = \"+\")\n; will set a temporary parameter inside a plot.\n\n\npch = \"+\"\n, \npch = 4\n.\n\n\ncol = \"red\"\n; dot color.\n\n\ncol =  \"red\"\n.\n\n\ncol.axis = \"red\"\n.\n\n\ncol.lab = \"red\"\n.\n\n\ncol.main = \"red\"\n.\n\n\ncol.sub = \"red\"\n.\n\n\nfont = \"red\"\n.\n\n\nfont.axis = \"red\"\n.\n\n\nfont.lab = \"red\"\n.\n\n\nfont.main = \"red\"\n.\n\n\nfont.sub = \"red\"\n.\n\n\nadj = -0.1\n; adjust the text to the plotting position (-1\n-0.5\n0\n0.5\n1), from left to right, 0 being the center.\n\n\ncex = 1.5\n; character 50% larger.\n\n\ncex.axis = 1.5\n.\n\n\ncex.lab = 1.5\n.\n\n\ncex.main = 1.5\n.\n\n\ncex.sub = 1.5\n.\n\n\nlab = c(5, 7, 12)\n; the first two numbers are the desired number of tick intervals on the x and y axes respectively. The third number is the desired length of axis labels.\n\n\nlas = 1\n; orientation of axis labels (text and numbers). 0 means always parallel to axis, 1 means always horizontal, and 2 means always perpendicular to the axis.\n\n\nmgp = c(3, 1, 0)\n; position of the axis components.\n\n\ntck = 0.01\n; length of tick marks.\n\n\nxaxs = \"r\"\n; axis style.\n\n\nxaxs = \"i\"\n; inside.\n\n\nmai = c(1, 0.5, 0.5, 0)\n; margins in inches around the plot.\n\n\nmar = c(4, 2, 2, 1)\n; in text lines.\n\n\nand many more.\n\n\n\n\nR allows you to create an n by m array of plots on a single page:\n\n\n\n\nmfcol = c(3.2)\n; 3 rows, 2 columns, 6 plotting areas.\n\n\nmfrow = c(3,2)\n; idem but filled by rows.\n\n\nomi = c(1, 0.5, 0.5, 0)\n; margins between plots.\n\n\noma = c(1, 0.5, 0.5, 0)\n; margins outside plots.\n\n\nmfg = c(2, 2, 3, 2)\n; position of the current figure in a multiple figure environment. The first two numbers are the row and column of the current figure; the last two are the total number of rows and columns in the multiple figure array; in other words, 2nd row and 2nd column in a 3x2 panel.\n\n\nfig = c(4, 9, 1, 4) / 10\n; position of the current figure on the page. Values are the positions of the left, right, bottom and top edges, respectively, as a percentage of the page measured from the bottom left corner.\n\n\nand many more.\n\n\n\n\nGeometric shapes\n\n\n\n\npolygon(x, y, ...)\n; x, y are vectors containing the coordinates of the vertices of the polygon.\n\n\n\n\nGraphic help\n\n\n\n\nhelp(plotmath)\n.\n\n\nexample(plotmath)\n.\n\n\ndemo(plotmath)\n.\n\n\nhelp(Hershey)\n.\n\n\ndemo(Hershey)\n.\n\n\nhelp(Japanese)\n.\n\n\ndemo(Japanese)\n.\n\n\n\n\nGraphic text and mouse\n\n\nLeave graphic marks and texts.\n\n\n\n\nlocator(n, type)\n; select with mouse a max of n locations to mark on the graph (left click, right click to stop).\n\n\ntext(locator(1), \"Outlier\", adj=0)\n; select with mouse a location to add a string on the graph.\n\n\nidentify(x, y)\n; add a label to a dot with mouse.\n\n\nidentify(x, y, labels)\n.\n\n\nidentify(x, y, \"yes\")\n.\n\n\n\n\nGraphic device\n\n\n\n\nsplit.screen()\n; FALSE or number of regions within the current device which can, to some extent, be treated as separate graphics devices. It is useful for generating multiple plots on a single device.\n\n\nlayout()\n; divides the device up into as many rows and columns as there are in matrix mat.\n\n\n\n\nGraphic device driver\n\n\nOpen a special graphics window.\n\n\n\n\nX11()\n; under UNIX.\n\n\nwindows()\n; under Windows.\n\n\nwin.printer()\n.\n\n\nwin.metafile()\n.\n\n\n\n\n\n\nquartz()\n; under OS X.\n\n\ndev.new()\n; returns the return value of the device opened, usually invisible NULL.\n\n\ngrid()\n adds an rectangular grid to an existing plot.\n\n\npostscript()\n; starts the graphics device driver for producing PostScript graphics.\n\n\npostscript(\"file.ps\", horizontal=FALSE, height=5, pointsize=10)\n.\n\n\npostscript(\"plot1.eps\", horizontal=FALSE, onefile=FALSE, height=8, width=6, pointsize=10)\n.\n\n\n\n\n\n\npdf()\n; starts the graphics device driver for producing PDF graphics.\n\n\npng()\n; idem.\n\n\njpeg()\n; idem.\n\n\ntiff()\n; idem.\n\n\nbitmap()\n; idem.\n\n\ndev.off()\n; shuts down the specified (by default the current) device.\n\n\ndev.set()\n; dev.set makes the specified device the active device.\n\n\ndev.list()\n; returns the numbers of all open devices.\n\n\ndev.next()\n, \ndev.prev()\n; return the number and name of the next / previous device in the list of devices.\n\n\ngraphics.off(); terminate all devices.\n\n\n\n\n13, Packages\n\n\n\n\ninstall.package()\n; on the computer.\n\n\nlibrary()\n; load it.\n\n\nsearch()\n; check what is loaded.\n\n\nloadedNamespaces()\n; idem.\n\n\nhelp.start()\n; start the HTML help system, package section.\n\n\n\n\nFind out about packages:\n\n\nCRAN.R-project.org\n\n\nwww.bioconductor.org\n\n\nwww.omegahat.org\n\n\n14, OS Facilities\n\n\nManage files with Linux or Windows or RStudio.", 
            "title": "An Introduction to R"
        }, 
        {
            "location": "/An Introduction to R/#1-introduction-and-preliminaries", 
            "text": "Run R (CLI).  Quit with  q() .    Run R in an IDE (GUI); like RStudio.  Create a working directory  work .  Ask help.  help(function) ; open a web documentation in a browser or in the IDE.  ?function ; idem.  ??function ; idem, but showing concordances.  help(\"[[\") ; idem, searching with a string.  help.start() ; show the entire manual.    sink() ; divert output from the console to a connection; restore the output to the console.  objects() ,  ls() ; see the objects stored in a session.  Objects are in a file with  .RData  extension.    rm(x, y, ink, ...) ; remove stored objects.  All commands entered or run are recorded in a file with  .Rhistory  extension.", 
            "title": "1, Introduction and Preliminaries"
        }, 
        {
            "location": "/An Introduction to R/#2-simple-manipulations-numbers-and-vectors", 
            "text": "Create a vector  x  - c(1, 2) # assignment (universal).\nx\n[1] 1 2\n\nc(2, 1) -  y # alternative assignment.\ny\n[1] 2 1\n\nx = c(1, 2) # alternative assignment (some limitations).\nx  - c(1, 2) # permanent assignment.\n\n# examples\nab  - 9\nab\n[1] 9\n\nassign( ab , 10)\nab \n[1] 10  Create a sequence (vector)  x  - 2 * 1:15\n\nx\n[1]  2  4  6  8 10 12 14 16 18 20 22 24 26 28 30\n\nn  - 10\nx  - 1:n-1\n\nx\n[1] 1 2 3 4 5 6 7 8 9\n\nx  - 30:1\nx\n[1] 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3\n[29]  2  1\n\nseq(from = 1, to = 30)\n[1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\n[29] 29 30\n\nseq(1, 30)\n[1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\n[29] 29 30\n\nseq(30, 1)\n[1] 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3\n[29]  2  1\n\nseq(1, 30, by = 2)\n[1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29  Repetition  rep(2, times = 5)\n[1] 2 2 2 2 2  x  - c( x ,  y )[rep(c(1, 2, 2, 1), times = 4)]\n\nx\n[1]  x   y   y   x   x   y   y   x   x   y   y   x   x   y   y   x   Length (vector)   length(vector)   Boolean   TRUE  or  T ;  T == 1 .  FALSE  or  F ;  F == 0 .   Some operators    =   =  ==  !=     |  ||  and many more.   Missing data and more   NA; not available.  NaN; not a number.  Inf - Inf == NaN == 0/0; infinite number.   x  - c(1:3, NA)\n\nx\n[1] 1 2 3 NA   is.na(var) .  var == NA .  is.na(x) .  !is.na(x) .   x  - c(-1:3, NA)\ny  - x[!is.na(x)   x   0]\n\nx\n[1]  -1  0  1  2  3 NA\n\ny\n[1] 1 2 3  Extract, subset (vector)   x[i] ; index.   Backslash use for some characters   \\\\ ; backslash.  \\n ; new line.  \\t ; tab.  \\b ; backspace.   Concatenate, paste (vector)  labs  - paste(c( X ,  Y ), 1:10, sep =  )\n\nlabs\n[1]  X1    Y2    X3    Y4    X5    Y6    X7    Y8    X9    Y10   A note of data handling and manipulations  You can also  split() ,  merge() ,  rbind() ,  cbind()  vectors.   It is also possible with other objects such as factors, lists, arrays, matrices, and data frames.  There are built-in functions to extract, exclude, subset, replace, transform or convert ( .as ), concatenate, paste, group, and bind.  \\sub slice, extract, exclude, subset, replace, convert,  concatenate, paste, group, bind,     Exclude, remove (vector)  z  - 1:20\n\nz\n[1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\nzz  - z[-(1:5)]\n\nzz\n[1]  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20  Replace (vector)  x  - c(1, 1, 1, NA)\n\nx\n[1]  1  1  1 NA\n\nx[is.na(x)]  - 0\n\nx\n[1] 1 1 1 0\n# replaces any missing values in x by zeros  Absolute value   y  - abs(y) .   Convert ( .as )   as.vector() .  as.integer() .  as.numeric()  as.factor() .  as.character() .  and many more.", 
            "title": "2, Simple Manipulations; Numbers and Vectors"
        }, 
        {
            "location": "/An Introduction to R/#3-objects-their-modes-and-attributes", 
            "text": "Object type  obj  - 1\n\nobj1  - numeric(obj)\nmode(obj1)\n[1]  numeric \nobj2  - character(obj)\nmode(obj2)\n[1]  character \n\nx  - 1\n\n# class() != mode(), but almost\nmode(x)\n[1]  numeric \n\nx  - factor(x)\nx\n[1] 1\nLevels: 1\n\nx  - numeric(x)\nx\n[1] 0\n\n# load key:value\nobj[3]  - 17\n\nobj\n[1]  1 NA 17  Classes  class \\sub   numeric .  logical .  character .  list .  matrix .  array .  factor .  data.frame .   class(obj)\n[1]  numeric \n\n# print the object as ordinary\nunclass(obj)\n[1]  1 NA 17", 
            "title": "3, Objects, their Modes and Attributes"
        }, 
        {
            "location": "/An Introduction to R/#4-ordered-and-unordered-factors", 
            "text": "state  - c( tas , qld , sa , sa , sa , vic , nt , act , qld , nsw , wa , nsw , nsw , vic , vic , vic , nsw , qld , qld , vic , nt , wa , wa , qld , sa ,  tas , nsw ,  nsw ,  wa , act )\n\nstatef  - factor(state)\n\n# class != mode()\nclass(statef)\n[1]  factor \nmode(statef)\n[1]  numeric \n\nlevels(statef)\n[1]  act   nsw   nt    qld   sa    tas   vic   wa  \n\nincomes  - c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43)\n\nincmeans  - tapply(incomes, statef, mean)\n\nincmeans\n  act   nsw    nt   qld    sa   tas   vic    wa \n48.50 55.00 54.00 51.60 54.25 53.00 61.60 54.50 \n\nstderr  - function(x) { sqrt(var(x) / length(x)) }\n\nstderr(incomes)\n[1] 1.524462\n\n# alternatively\nincster  - tapply(incomes, statef, stderr)\n\nincster\n      act       nsw        nt       qld        sa       tas       vic        wa \n5.5000000 3.9665266 5.0000000 2.6570661 5.3909647 7.0000000 0.8717798 6.2249498    # a vector of characters\nstateff  - c( a ,  b ,  c )\n[1]  a   b   c \n\nas.factor(stateff)\n[1] a b c\nLevels: a b c  # Create a factor with the wrong order of levels\nsizes  - factor(c( small ,  large ,  large ,  small ,  medium ))\n\nsizes\n[1] small  large  large  small  medium\nLevels: large medium small\n\n# levels can be specified explicitly\nsizes  - factor(sizes, levels = c( small ,  medium ,  large ))\n\nsizes\n[1] small  large  large  small  medium\nLevels: small medium large\n\n# do the same with an ordered factor\nsizes  - ordered(c( small ,  large ,  large ,  small ,  medium ))\n\nsizes  - ordered(sizes, levels = c( small ,  medium ,  large ))\n\nsizes\n[1] small  large  large  small  medium\nLevels: small   medium   large\n\n# use relevel() to make a particular level first in the list. (This will not work for ordered factors.)\n\n# Create a factor with the wrong order\nsizes\n[1] small  large  large  small  medium\nLevels: large medium small\n\n# make medium first\nsizes  - relevel(sizes,  medium )\n\nsizes\n[1] small  large  large  small  medium\nLevels: medium large small\n\n# make small first\nsizes  - relevel(sizes,  small )\n\nsizes\n[1] small  large  large  small  medium\nLevels: small medium large\n\n# specify the proper order when the factor is created\nsizes  - factor(c( small ,  large ,  large ,  small ,  medium ),\n                  levels = c( small ,  medium ,  large ))\n\nsizes\n[1] small  large  large  small  medium\nLevels: small medium large\n\n# Create a factor with the wrong order of levels\nsizes  - factor(c( small ,  large ,  large ,  small ,  medium ))\n\nsizes\n[1] small  large  large  small  medium\nLevels: large medium small\n\n# reverse the order of levels in a factor\nsizes  - factor(sizes, levels=rev(levels(sizes)))\n\nsizes\n[1] small  large  large  small  medium\nLevels: small medium large  Convert ( .as )   as.factor() .", 
            "title": "4, Ordered and Unordered Factors"
        }, 
        {
            "location": "/An Introduction to R/#5-arrays-and-matrices", 
            "text": "Dimension  z  - 1:1500\ndim(z)  - c(3, 5, 100)\n\n# gives 100 arrays of 3 lines by 5 columns  Create a matrix, an array  x  - array(1:20, dim=c(4, 5))\n\nx\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    5    9   13   17\n[2,]    2    6   10   14   18\n[3,]    3    7   11   15   19\n[4,]    4    8   12   16   20\n\nx  - array(1:20, dim=c(2, 5, 2))\n\nx\n, , 1\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n, , 2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   11   13   15   17   19\n[2,]   12   14   16   18   20\n\n\ni  - array(c(1:3, 3:1), dim = c(3, 2))\n\ni\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    2\n[3,]    3    1\n\nj  - array(c(1:8), dim = c(2, 2, 2))\n\nj\n, , 1\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n, , 2\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n\n\nk  - array(1:27, c(3, 3, 3))  k\n, , 1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n, , 2\n\n     [,1] [,2] [,3]\n[1,]   10   13   16\n[2,]   11   14   17\n[3,]   12   15   18\n\n, , 3\n\n     [,1] [,2] [,3]\n[1,]   19   22   25\n[2,]   20   23   26\n[3,]   21   24   27\n\n\na  - matrix(1, 2, 2)\n\na\n     [,1] [,2]\n[1,]    1    1\n[2,]    1    1\n\nb  - matrix(2, 2, 2)\n\nb\n     [,1] [,2]\n[1,]    2    2\n[2,]    2    2  Extract, subset (matrix)   a[2, 1] ; rows, columns.   Extract, subset (array)   a[2, 1, 1] ; rows, columns, matrix.   Cross product vs multiplication  a  - 1:5\nb  - seq(10, 6, -1)\n\na\n[1] 1 2 3 4 5\nb\n[1] 10  9  8  7  6\n\na * b\n[1] 10 18 24 28 30\n\ncrossprod(a, b)\n     [,1]\n[1,]  110\n\nab  - a %o% b\nab\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   10    9    8    7    6\n[2,]   20   18   16   14   12\n[3,]   30   27   24   21   18\n[4,]   40   36   32   28   24\n[5,]   50   45   40   35   30  Matrix operation  A et B are 2x2 matrices:   A * B ; scalar multiplication.  A %*% B ; matrix multiplication  x %*% A %*% y ; matrix multiplication.  crossproduct(A, B) ; cross multiplication.  ab  - outer(A,B,\"*\") ;  a * b .  ab  - outer(A,B,\"+\") ;  a + b .  ab  - outer(A,B,\"-\") ;  a - b .  and many more.   Diagonal and triangle  ab\n     [,1] [,2] [,3] [,4] [,5]\n[1,]   11   10    9    8    7\n[2,]   12   11   10    9    8\n[3,]   13   12   11   10    9\n[4,]   14   13   12   11   10\n[5,]   15   14   13   12   11\n\ndiag(ab)\n[1] 11 11 11 11 11\n\nlower.tri(ab)\n      [,1]  [,2]  [,3]  [,4]  [,5]\n[1,] FALSE FALSE FALSE FALSE FALSE\n[2,]  TRUE FALSE FALSE FALSE FALSE\n[3,]  TRUE  TRUE FALSE FALSE FALSE\n[4,]  TRUE  TRUE  TRUE FALSE FALSE\n[5,]  TRUE  TRUE  TRUE  TRUE FALSE\n\nlower.tri(ab) * ab\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    0    0    0    0    0\n[2,]   12    0    0    0    0\n[3,]   13   12    0    0    0\n[4,]   14   13   12    0    0\n[5,]   15   14   13   12    0\n\nupper.tri(ab)\n      [,1]  [,2]  [,3]  [,4]  [,5]\n[1,] FALSE  TRUE  TRUE  TRUE  TRUE\n[2,] FALSE FALSE  TRUE  TRUE  TRUE\n[3,] FALSE FALSE FALSE  TRUE  TRUE\n[4,] FALSE FALSE FALSE FALSE  TRUE\n[5,] FALSE FALSE FALSE FALSE FALSE\n\nupper.tri(ab) * ab\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    0   10    9    8    7\n[2,]    0    0   10    9    8\n[3,]    0    0    0   10    9\n[4,]    0    0    0    0   10\n[5,]    0    0    0    0    0  Solving a matrix system  b  - A %*% x\n\n# or\nsolve(A, b)   solve(A) ; inverse the matrix.   Symmetrical matrix and eigen value  b  - matrix(2, 2, 2)\n\nb\n     [,1] [,2]\n[1,]    2    2\n[2,]    2    2\n\ne  - eigen(b, only.values = TRUE)\ne\n$values\n[1] 4 0\n\n$vectors\nNULL  Singular value decomposition (matrix)  svd(b)\n$d\n[1] 4 0\n\n$u\n           [,1]       [,2]\n[1,] -0.7071068 -0.7071068\n[2,] -0.7071068  0.7071068\n\n$v\n           [,1]       [,2]\n[1,] -0.7071068 -0.7071068\n[2,] -0.7071068  0.7071068  Determinant (matrix)  det(ab)\n[1] 0  Least square fitting (matrix)   lsfit()  or least squares estimate of  b  in the model:  y = X b + e .   QR decomposition (matrix)  qr(ab)\n$qr\n            [,1]        [,2]          [,3]          [,4]          [,5]\n[1,] -29.2403830 -27.0174299 -2.479448e+01 -2.257152e+01 -2.034857e+01\n[2,]   0.4103913   0.2418254  4.836508e-01  7.254763e-01  9.673017e-01\n[3,]   0.4445906  -0.1703815  3.717512e-15  1.134003e-14  1.749210e-14\n[4,]   0.4787899  -0.5015812  3.957070e-01  1.553722e-15  1.295516e-15\n[5,]   0.5129892  -0.8327809  5.076995e-01  6.936403e-01 -1.685698e-16\n\n$rank\n[1] 2\n\n$qraux\n[1] 1.376192e+00 1.160818e+00 1.765282e+00 1.720322e+00 1.685698e-16\n\n$pivot\n[1] 1 2 3 4 5\n\nattr(, class )\n[1]  qr   Also:   qr.coef() .  qr.fitted() .  qr.resid() .   Convert ( .as )   as.array() .  as.matrix() .", 
            "title": "5, Arrays and Matrices"
        }, 
        {
            "location": "/An Introduction to R/#6-lists-and-data-frames", 
            "text": "Crate a list  Lst  - list(name =  Fred , wife =  Mary , no.children = 3, child.ages = c(4,7,9))\n\nLst\n$name\n[1]  Fred \n\n$wife\n[1]  Mary \n\n$no.children\n[1] 3\n\n$child.ages\n[1] 4 7 9  Extract, subset (list)  Lst$name\n[1]  Fred \n\nLst[[ name ]] == Lst[[1]]\n[1] TRUE\n\n\nLst[5]  - list( ) # or list()  \nLst[ new ]  - list()  # key, value\n\nLst[1]\n$name\n[1]  Fred \n\nLst$child.ages[1]\n[1] 4\nLst[[4]][1]\n[1] 4  Concatenate, paste  x  - c(1,2)\ny  - c(3,4)\n\nc(x, y)\n[1] 1 2 3 4\n\npaste(x, y)\n[1]  1 3   2 4 \n\ndata.frame(x, y)\n  x y\n1 1 3\n2 2 4\n\na  - list(1, 2)\nb  - list( a ,  b )\n\nlist(a, b)\n[[1]]\n[[1]][[1]]\n[1] 1\n\n[[1]][[2]]\n[1] 2\n\n\n[[2]]\n[[2]][[1]]\n[1]  a \n\n[[2]][[2]]\n[1]  b \n\nh  - matrix(2, 2, 2)\ng  - matrix(1, 2, 2)\n\nc(h, g)\n[1] 2 2 2 2 1 1 1 1\n\npaste(h, g)\n[1]  2 1   2 1   2 1   2 1 \n\nlist(h, g)\n[[1]]\n     [,1] [,2]\n[1,]    2    2\n[2,]    2    2\n\n[[2]]\n     [,1] [,2]\n[1,]    1    1\n[2,]    1    1  Convert ( as. )   as.matrix()   Data frame   A data frame can hold other data frames.  A list can hold other lists.  A vector can hold other vectors.    Each variable can be numeric, character, logical, factor, numeric matrix, list, data.frame.   state  - c( tas , qld , sa , sa , sa , vic , nt , act , qld , nsw , wa , nsw , nsw , vic , vic , vic , nsw , qld , qld , vic , nt , wa , wa , qld , sa ,  tas , nsw ,  nsw ,  wa , act )\n\nstatef  - factor(state)\n\nincomes  - c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43)\n\nincomef  - factor(incomes)\n\naccountants  - data.frame(home=statef, loot=incomes, shot=incomef)\n\nhead(accountants, 10)\n   home loot shot\n1   tas   60   60\n2   qld   49   49\n3    sa   40   40\n4    sa   61   61\n5    sa   64   64\n6   vic   60   60\n7    nt   59   59\n8   act   54   54\n9   qld   62   62\n10  nsw   69   69\n\n# class() != mode()\nclass(accountants)\n[1]  data.frame \n\nmode(accountants)\n[1]  list   Concatenate, paste (data frame)  # accountants == acc\n\nc(accountants, acc)\n$home\n [1] tas qld sa  sa  sa  vic nt  act qld nsw wa  nsw nsw\n[14] vic vic vic nsw qld qld vic nt  wa  wa  qld sa  tas\n[27] nsw nsw wa  act\nLevels: act nsw nt qld sa tas vic wa\n\n$loot\n [1] 60 49 40 61 64 60 59 54 62 69 70 42 56 61 61 61 58 51\n[19] 48 65 49 49 41 48 52 46 59 46 58 43\n\n$shot\n [1] 60 49 40 61 64 60 59 54 62 69 70 42 56 61 61 61 58 51\n[19] 48 65 49 49 41 48 52 46 59 46 58 43\n20 Levels: 40 41 42 43 46 48 49 51 52 54 56 58 59 ... 70\n\n$home\n [1] tas qld sa  sa  sa  vic nt  act qld nsw wa  nsw nsw\n[14] vic vic vic nsw qld qld vic nt  wa  wa  qld sa  tas\n[27] nsw nsw wa  act\nLevels: act nsw nt qld sa tas vic wa\n\n$loot\n [1] 60 49 40 61 64 60 59 54 62 69 70 42 56 61 61 61 58 51\n[19] 48 65 49 49 41 48 52 46 59 46 58 43\n\n$shot\n [1] 60 49 40 61 64 60 59 54 62 69 70 42 56 61 61 61 58 51\n[19] 48 65 49 49 41 48 52 46 59 46 58 43\n20 Levels: 40 41 42 43 46 48 49 51 52 54 56 58 59 ... 70\n\n\npaste(accountants, acc)\n[1]  c(6, 4, 5, 5, 5, 7, 3, 1, 4, 2, 8, 2, 2, 7, 7, 7, 2, 4, 4, 7, 3, 8, 8, 4, 5, 6, 2, 2, 8, 1) c(6, 4, 5, 5, 5, 7, 3, 1, 4, 2, 8, 2, 2, 7, 7, 7, 2, 4, 4, 7, 3, 8, 8, 4, 5, 6, 2, 2, 8, 1)                                                             \n[2]  c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43) c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56, 61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46, 59, 46, 58, 43) \n[3]  c(14, 7, 1, 15, 17, 14, 13, 10, 16, 19, 20, 3, 11, 15, 15, 15, 12, 8, 6, 18, 7, 7, 2, 6, 9, 5, 13, 5, 12, 4) c(14, 7, 1, 15, 17, 14, 13, 10, 16, 19, 20, 3, 11, 15, 15, 15, 12, 8, 6, 18, 7, 7, 2, 6, 9, 5, 13, 5, 12, 4)                           \n\nlist(accountants, acc)\n[[1]]\n   home loot shot\n1   tas   60   60\n2   qld   49   49\n3    sa   40   40\n4    sa   61   61\n5    sa   64   64\n6   vic   60   60\n7    nt   59   59\n8   act   54   54\n9   qld   62   62\n10  nsw   69   69\n...\n\n[[2]]\n   home loot shot\n1   tas   60   60\n2   qld   49   49\n3    sa   40   40\n4    sa   61   61\n5    sa   64   64\n6   vic   60   60\n7    nt   59   59\n8   act   54   54\n9   qld   62   62\n10  nsw   69   69\n...\n\naccountants + acc\n   home loot shot\n1    NA  120   NA\n2    NA   98   NA\n3    NA   80   NA\n4    NA  122   NA\n5    NA  128   NA\n6    NA  120   NA\n7    NA  118   NA\n8    NA  108   NA\n9    NA  124   NA\n10   NA  138   NA\n...  Convert ( as. )   as.data.frame()   Load data into R   read.table() ; produce a data frame with inputs.   A note on environment objects   search() ; objects in .GlobalEnv; including packages.  ls() ; list these objects.    attach() ; attach an object to .GlobalEnv.  detach() .", 
            "title": "6, Lists and Data Frames"
        }, 
        {
            "location": "/An Introduction to R/#7-readingwriting-data-fromto-files-inputoutput", 
            "text": "A lot more can be found on I/O: depending on the file type, the data format, the desired R object, many commands are available. Depending on a file format, look for the dedicated package on CRAN.  read, reading, write, writing, input, output, i/o \\sub  Examples  # read from a file\nHousePrice  - read.table( house.data , header = TRUE, sep =  ; )\n\n# read a 3-variable list\ninput  - scan( input.dat , list( , 0, 0))  \n\n# read a3-variable list\ninput  - scan( input.dat , list(id= , x = 0, y = 0))\n\n# make 3 separate vectors\nlabel  - input[[1]]\nx  - input[[2]]\ny  - input[[3]]\n\n# label them\nlabel  - inp$id\nx  - inp$x\ny  - inp$y\n\n# read a 5-variable list and transform it into a matrix\nX  - matrix(scan( light.dat , 0), ncol = 5, byrow = TRUE)  Inputing from file types   .txt.  .csv.  .tsv.  .hdf5.  .bmp.  .jpeg.  .png.  .tiff.  .zip.  .xls, spreadsheet.  databases.  statistical programs.  binary files.  and many more (some are up and coming such as julia files).   Cleaning parameter   strip.white = TRUE ; remove unnecessary spaces.   Change the data frame or matrix format   stack() ; for example, take a 6-column, 4-variable data frame and stack the 4 variables into one long column.  unstack() ; vice-versa.   # 6 columns or variables\nStatus Age  V1    V2    V3    V4\n P 23646 45190 50333 55166 56271\nCC 26174 35535 38227 37911 41184\nCC 27723 25691 25712 26144 26398\nCC 27193 30949 29693 29754 30772\nCC 24370 50542 51966 54341 54273\nCC 28359 58591 58803 59435 61292\nCC 25136 45801 45389 47197 47126\n...\n\n# 4 columns, more rows\nStatus Age values ind\nX1  P 23646 45190 V1\nX2 CC 26174 35535 V1\nX3 CC 27723 25691 V1\nX4 CC 27193 30949 V1\nX5 CC 24370 50542 V1\nX6 CC 28359 58591 V1\nX7 CC 25136 45801 V1\nX11 P 23646 50333 V2\n...   reshape() ; stack and unstack variables, according to parameters.   reshape(zz, idvar =  id , timevar =  var , varying = list(c( V1 ,  V2 ,  V3 ,  V4 )), direction =  long )   ftable() ; flatten multidimensional matrices (arrays);  read.ftable() .  data() ; list of datasets.  data(package = \"rpart\") ; load package.  edit(input) ; open a mini-spreadsheet.  xnew  - edit(input) ; open and save it as a new dataset.  and many more.   Encoding   utf-8 for Linux and OS X.  UCS-2LE and UTF-16 for Windows.   # examples\nreadLines( filename.txt , encoding =  UTF-8 )\nreadLines( filename.txt , encoding =  UCS2LE )\nread.delim( clipboard , fileEncoding= UTF-16 )  Output   write.table() ; many parameters.  write.matrix() .  write.foreign() .   Check a file   readLines(\"aab.txt\") .  readLines(\"aab.txt\", 1) .  unlink(\"aab.txt\") ; delete the file on the working directory.   Directory management   getwd() ; get the current working directory.  setwd() ; set the current working directory.  file.show(filepath) .  system.file()   Spreadsheet editor and edition in R   fix(c) ; edit object c; a vetor, list, data frame, etc. in a mini-spreadsheet.  data.entry(c, mode=NULL, Names=NULL), dataentry(c), de(c, Modes=list(), Names=NULL) ; idem.  vi(file= ) ; invoke a text editor.  emacs(file= ) ; idem.  pico(file= ) ; idem.  xemacs(file= ) ; idem.  xedit(file=) ; idem.", 
            "title": "7, Reading/Writing Data from/to Files (Input/Output)"
        }, 
        {
            "location": "/An Introduction to R/#8-probability-distributions", 
            "text": "Distribution   beta .  binom .  cauchy .  chisq .  exp .  f .  gamma .  geom .  hyper .  lnorm .  logis .  nbinom .  norm .  pois .  signrank .  t .  unif .  weibull .  wilcox .  and many more.   Prefixes   d ; density.  p ; CDF or cumulative density function.  q ; quantile.  r ; random deviates or simulation or number generation.   Distribution operation  Commands, prefix + distribution, examples:   dbeta(x= ) .  pbinom(q= , lower.tail= , log.p= ) .  qcauchy(p= , lower.tail= , log.p= ) .  rchisq(n or r= ) .  ptukey() ; studentized (t) distribution  qtukey() .  dmultinom() .  ltinomial .  rmultinom() .  etc.   Descriptive statistics  # overview\nsummary(cars)\nstr(cars)\nboxplot(cars$speed)\nboxplot(cars$dist)\n\n# Tukey five-number summaries\nfivenum(cars$speed)\n\n# histograms and bar charts\nstem(cars$speed)\nhist(cars$speed)\nbarplot(cars$speed)\ndotchart(cars$speed)\n\n# scatter plot\nplot(cars$speed, cars$dist)\nlines(cars$speed, cars$dist)\n\n# add a (1-d) representation\nplot(cars$speed, cars$dist)\nrug(cars$speed, ticksize = 0.03)\nplot(cars$speed, cars$dist)\nrug(cars$dist, ticksize = 0.03)\n\n# normality of the residuals, linearity\nqqnorm(cars$speed)\nqqline(cars$speed)\n\nqqnorm(cars$dist)\nqqline(cars$dist)\n\nqqplot(cars$speed, cars$dist)\n\n# normality test\nshapiro.test(cars$speed)\n\n# Kolmogorov-Smirnov test on a sample\nks.test(cars$speed[10],  pnorm , mean = mean(cars$speed), sd = sqrt(var(cars$speed)))\nks.test(cars$speed[40],  pnorm , mean = mean(cars$speed), sd = sqrt(var(cars$speed)))  Test   t.test(A,B) ; true difference of means is not 0, difference means.  var.test(A,B) ; true ratio of variances is not 1, difference variances.  t.test(A,B, var.equal=TRUE) ; true difference of means is not 0.  wilcox.test(A,B) ; rank sum with continuity correction, continuous distribution.  and many more.   Normality   plot(ecdf(A), do.points=FALSE, verticals=TRUE, xlim=range(A, B))  plot(ecdf(B), do.points=FALSE, verticals=TRUE, add=TRUE)  ks.test(A,B); maximal vertical distance between the two ecdf", 
            "title": "8, Probability Distributions"
        }, 
        {
            "location": "/An Introduction to R/#9-grouping-loops-and-conditional-execution", 
            "text": "; AND.  ; AND; evaluates left to right, examining only the first element of each vector.  | ; OR.  || ; OR; evaluates left to right, examining only the first element of each vector.  xor() ; elementwise exclusive OR.  isTRUE(x) ; is true if and only if x is a length-one logical vector whose only element is TRUE and which has no attributes.  ifelse(condition, a, b) ; if  condition  is proven true, return  a , or else, return  b .   Loop  looping \\sub   for(var in seq) expr .  while(condition is true) expr .  repeat expr .  break ; break out of a for, while or repeat loop; control is transferred to the first statement outside the inner-most loop.  next ; halt the processing of the current iteration and advance the looping index.", 
            "title": "9, Grouping, Loops and Conditional Execution"
        }, 
        {
            "location": "/An Introduction to R/#10-writing-you-own-functions", 
            "text": "Simple custom function  # define\nmyfunction  - function(arg1, arg2, ...){\nstatements\nreturn(object)\n}\n\n# call\nmyfunction(arg1, arg2, ...)  It is possible to remplace function arguments with variables and objects.  Complex custom function  Involve conditions and loops.  twosam  - function(y1, y2) {\n    n1  - length(y1); n2  - length(y2)\n    yb1  - mean(y1);\n    yb2  - mean(y2)\n    s1  - var(y1);\n    s2  - var(y2)\n    s  - ((n1 - 1) * s1 + (n2-1) * s2) / (n1 + n2 - 2)\n    tst  - (yb1 - yb2) / sqrt(s * (1 / n1 + 1 / n2))\n    tst\n}  Define and call on the same line   tstat  - twosam(data$male, data$female); tstat   Several commands and functions can be called on the same line with:   command1; command2; function1; function2     Two ways of defining and calling a function  multy  - function(x, y) {\n    x * y\n    }\n\n# with a binary operator %!%   - function(x, y) {\n    x * y\n    }\n\nx  - 2\ny  - 2\n\nmulty(x, y)\n[1] 4\n\nx %!% y\n[1] 4  Matrix multiplication operator,  %*% , and the outer product matrix operator,  %o% , are other examples of binary operators.  Function in a function  # case 1\narea  - function(f, a, b, eps = 1.0e-06, lim = 10) {\n    fun1  - function(f, a, b, fa, fb, a0, eps, lim, fun) {\n        d  - (a + b)/2\n        h  - (b - a)/4\n        fd  - f(d)\n        a1  - h * (fa + fd)\n        a2  - h * (fd + fb)\n        if(abs(a0 - a1 - a2)   eps || lim == 0)\n            return(a1 + a2)\n        else {\n            return(fun(f, a, d, fa, fd, a1, eps, lim - 1, fun) \n                fun(f, d, b, fd, fb, a2, eps, lim - 1, fun))\n        }\n    }\n    fa  - f(a)\n    fb  - f(b)\n    a0  - ((fa + fb) * (b - a))/2\n    fun1(f, a, b, fa, fb, a0, eps, lim, fun1)\n}\n\n# case 2\nf  - function(x) {\n    y  - 2*x\n    print(x)\n    print(y)\n    print(z)\n}\n\n# case 3\ncube  - function(n) {\n    sq  - function() n*n\n    n*sq()\n}\n\n# case 4\nopen.account  - function(total) {\n    list(\n        deposit = function(amount) {\n            if(amount  = 0)\n                stop( Deposits must be positive!\\n )\n            total  - total + amount\n            cat(amount,  deposited. Your balance is , total,  \\n\\n )\n        },\n        withdraw = function(amount) {\n            if(amount   total)\n                stop( You don\u2019t have that much money!\\n )\n            total  - total - amount\n            cat(amount,  withdrawn. Your balance is , total,  \\n\\n )\n        },\n        balance = function() {\n            cat( Your balance is , total,  \\n\\n )\n        }\n    )\n}\n\nross  - open.account(100)\nrobert  - open.account(200)\n\nross$withdraw(30)\nross$balance()\nrobert$balance()\nross$deposit(50)\nross$balance()\nross$withdraw(500)  Name  Add,  modify, and remove (with  names(x)  - NA or 0 ) names.   names() .  rownames() .  colnames() .  dimnames() .   Customizing startup  Customize the R environment through a directory initialization file; commands that you want to execute every time R is started under your system.  R will always source the Rprofile.site file first.   On Windows, the file is in C:\\Program Files\\R\\R-n.n.n\\etc. You can also place a .Rprofile file in any directory that you are going to run R from or in the user home directory.   Individual users control over their workspace and allows for different startup procedures in different working directories.  If no .Rprofile file is found in the startup directory, then R looks for a .Rprofile file in the user\u2019s home directory and uses that (if it exists) environment variable R_PROFILE_USER is set. The file it points to is used instead of the .Rprofile files.   Function named .First() in either of the two profile files or in the .RData image has a special status: initialize the environment  Sequence in which files are executed is:   Rprofile.site  the user profile  .RData  .First()  .Last(), if defined, is (normally) executed at the very end of the session.   List function and method   methods(class = \"data.frame\") ; list methods associated with the class.  methods(plot) ; list methods specific to the object.   methods(class =  data.frame )\n [1] $             $ -           [             [[            [[ -         \n [6] [ -           aggregate     anyDuplicated as.data.frame as.list      \n[11] as.matrix     by            cbind         coerce        dim          \n[16] dimnames      dimnames -    droplevels    duplicated    edit         \n[21] format        formula       head          initialize    is.na        \n[26] Math          merge         na.exclude    na.omit       Ops          \n[31] plot          print         prompt        rbind         row.names    \n[36] row.names -   rowsum        show          slotsFromS3   split        \n[41] split -       stack         str           subset        summary      \n[46] Summary       t             tail          transform     unique       \n[51] unstack       within       \nsee '?methods' for accessing help and source code\n\nmethods(plot)\n [1] plot.acf*           plot.data.frame*    plot.decomposed.ts*\n [4] plot.default        plot.dendrogram*    plot.density*      \n [7] plot.ecdf           plot.factor*        plot.formula*      \n[10] plot.function       plot.hclust*        plot.histogram*    \n[13] plot.HoltWinters*   plot.isoreg*        plot.lm*           \n[16] plot.medpolish*     plot.mlm*           plot.ppr*          \n[19] plot.prcomp*        plot.princomp*      plot.profile.nls*  \n[22] plot.R6*            plot.raster*        plot.spec*         \n[25] plot.stepfun        plot.stl*           plot.table*        \n[28] plot.ts             plot.tskernel*      plot.TukeyHSD*     \nsee '?methods' for accessing help and source code  Difference:   plot() ; a generic method.  plot.  ; a specific method such as  plot.ts()  for example.", 
            "title": "10, Writing you own Functions"
        }, 
        {
            "location": "/An Introduction to R/#11-statistical-models-in-r", 
            "text": "Regression  y  - 1:10\nx  - 1:10\n\na  - lm(y  sub x)\na\nCall:\nlm(formula = y  sub x)\n\nCoefficients:\n(Intercept)            x  \n  1.123e-15    1.000e+00  \n\n\n# no intercept, through the origin\nb  - lm(y  sub 0 + x)\nb\nCall:\nlm(formula = y  sub 0 + x)\n\nCoefficients:\nx  \n1  \n\n\n# no intercept\nc  - lm(y  sub -1 + x)\nc\nCall:\nlm(formula = y  sub -1 + x)\n\nCoefficients:\nx  \n1  \n\n\nd  - lm(y  sub x - 1)\nd\nCall:\nlm(formula = y  sub x - 1)\n\nCoefficients:\nx  \n1  \n\n\n# log\ne  - lm(log(y)  sub x)\ne\nCall:\nlm(formula = log(y)  sub x)\n\nCoefficients:\n(Intercept)            x  \n     0.2432       0.2304  \n\n\n# quadratic\nf  - lm(y  sub 1 + x + I(x^2))\nf\nCall:\nlm(formula = y  sub 1 + x + I(x^2))\n\nCoefficients:\n(Intercept)            x       I(x^2)  \n  1.123e-15    1.000e+00    5.699e-18  \n\n\n# polynomial\ng  - lm(y  sub X + poly(x, 2))\n\n\n\n# weighted regression\nfm1  - lm(y  sub x, data = dummy, weight = 1 / w^2)\n\n\n# and more\nnew.model  - update(old.model, new.formula)\n\nfm05  - lm(y  sub x1 + x2 + x3 + x4 + x5, data = production)\n\nfm6  - update(fm06, .  sub . + x6)\nsmf6  - update(fm6, sqrt(,)  sub .)  Explore the results   summary(regression results) .  vcov() ; variance-covariance matrix.  aov(formula, data = data.frame) .  anova(fitted.model.1, fitted.model.2, ...)  and many more.   anova, coeficient, coef, deviance, residuals, effects, formula, model, kappa, labels, plot, predict, proj, projection  Stepwise Regression  Select a suitable model by adding or dropping variables and preserving hierarchies. The best model with the smallest AIC (Akaike\u2019s Information Criterion) is discovered with the search.  Generalized least squares  gls, binomial, logit, probit, log, cloglog, gaussian, identity, log, inverse, gamma, identity, inverse, log, inverse.gaussian, 1/mu^2, identity, inverse, log, poisson, identity, log, sqrt, quasi-likelihood, logit, probit \\sub  fitted.model  - glm(formula, famili=family.generator, data = data.frame)  Nonlinear least squares  nls \\sub   nlm(function)   Maximum likehood  ml \\sub  When errors are not normal.   ml(function)   Mixed model   nlme  package.   Local Approximating Regression  Nonparametric local regression function.   lrf  - lowess(x, y) .   Robust regression  MASS  package.  Additive model   acepack  package.  mda  package.  gam  package.  mgcv  package.   Tree-based model  decision, classification tree, random forest \\sub   rpart  package.  tree  package.", 
            "title": "11, Statistical models in R"
        }, 
        {
            "location": "/An Introduction to R/#12-graphical-procedures", 
            "text": "www.statmethods.net/advgraphs  Graphic, packages   lattice  package.  ggplot2  package.  grid  package.  ggobi ,  rgl  packages; for interactive graphics, 3D, and surfaces.  and many more.   Basic plot   plot() .  boxplot() ..  lines(x,y) ; add a line to a basic plot.  pairs() ; multivariate, pairwise scatterplot matrix.   coplot(a  sub b | c) ; scatter plot of a  b given c, a factor vector (levels)  coplot(a  sub v | c + d) .  pie() .  hist(x) ; where  nclass = n  and  breaks = b .  barplot() ; can be horizontal or vertical.  dotchart(x, ...) ; a case of bar chart.  and many more with lots of options.   qq plot   qqnorm(x) .  qqline(x) .  qqplot(x, y) ; comparison.   Picture   image(x, y, z, ...) ; grid of rectangles with colors corresponding to the values in z.  contour(x, y, z, ...) ; z add contour lines (even to an existing plot).  persp(x, y, z, ...) ; perspective plots of a surface over the x\u2013y plane.   Graphic arguments and parameters  www.statmethods.net/advgraphs/parameters  x1  - rnorm(1000, 0.4, 0.8)\nx2  - rnorm(1000, 0.0, 1.0)\nx3  - rnorm(1000, -1.0, 1.0)\nhist(x1, width = 0.33, offset = 0.00, col =  blue , xlim = c(-4,4),\n     main =  Histogram of x1, x2   x3 ,\n     xlab =  x1 - blue, x2 - red, x3 - green )\nhist(x2, width = 0.33, offset = 0.33, col =  red , add = TRUE)\nhist(x3, width = 0.33, offset = 0.66, col =  green , add = TRUE)   add = TRUE ; superimpose a plot on another plot.  axes = FALSE ; no axes.  axis(side,...) ; 1 to 4, bottom, left, top, right.  log = \"x\", \"y\", \"xy\" ; difference scale.  type = \"p\"  (points);  \"l\"  (lines),  \"b\"  (p+l),  \"o\"  (l+p),  \"h\"  (vertical lines from points to the zero axis),  \"s\"  (step-function),  \"n\"  (not plotting).  xlab = \"bla\" .  ylab = \"bla\" .  main = \"bla\" .  sub = \"bla\" .  title(main, sub) .  points(x, y) ; add points on top of  plot() .  text(x, y, labels,...) ; add text to each point.  plot(x, t, type = \"n\"); text(x, y, names) ; replace the dot with text.  abline(a, b) ; add a line.  abline(0, 1, lty = 3) .  abline(coef(fm)) .  abline(coef(fm1), col = \"red\") .  abline(h = y) ; or  h = value ; add a horizontal line.  abline(v = x) ; or  v = value ; add a vertical line.  abline(lm.obj) .  legend(x, y, legend, ...) ; add a legend at a specified position.  fill = v ; add a vector of the same length as a legend.  lty = 2 ; line style.  lwd = 1.5 ; line width.  pch = 0 ; dot style.  par() ; list of permanent graphic parameters.  par(c(\"col\", \"lty\")) ; limit the list of parameters.  par(col = 4, lty = 2) ; set the parameters for all plots.  plot(x, y, pch = \"+\") ; will set a temporary parameter inside a plot.  pch = \"+\" ,  pch = 4 .  col = \"red\" ; dot color.  col =  \"red\" .  col.axis = \"red\" .  col.lab = \"red\" .  col.main = \"red\" .  col.sub = \"red\" .  font = \"red\" .  font.axis = \"red\" .  font.lab = \"red\" .  font.main = \"red\" .  font.sub = \"red\" .  adj = -0.1 ; adjust the text to the plotting position (-1 -0.5 0 0.5 1), from left to right, 0 being the center.  cex = 1.5 ; character 50% larger.  cex.axis = 1.5 .  cex.lab = 1.5 .  cex.main = 1.5 .  cex.sub = 1.5 .  lab = c(5, 7, 12) ; the first two numbers are the desired number of tick intervals on the x and y axes respectively. The third number is the desired length of axis labels.  las = 1 ; orientation of axis labels (text and numbers). 0 means always parallel to axis, 1 means always horizontal, and 2 means always perpendicular to the axis.  mgp = c(3, 1, 0) ; position of the axis components.  tck = 0.01 ; length of tick marks.  xaxs = \"r\" ; axis style.  xaxs = \"i\" ; inside.  mai = c(1, 0.5, 0.5, 0) ; margins in inches around the plot.  mar = c(4, 2, 2, 1) ; in text lines.  and many more.   R allows you to create an n by m array of plots on a single page:   mfcol = c(3.2) ; 3 rows, 2 columns, 6 plotting areas.  mfrow = c(3,2) ; idem but filled by rows.  omi = c(1, 0.5, 0.5, 0) ; margins between plots.  oma = c(1, 0.5, 0.5, 0) ; margins outside plots.  mfg = c(2, 2, 3, 2) ; position of the current figure in a multiple figure environment. The first two numbers are the row and column of the current figure; the last two are the total number of rows and columns in the multiple figure array; in other words, 2nd row and 2nd column in a 3x2 panel.  fig = c(4, 9, 1, 4) / 10 ; position of the current figure on the page. Values are the positions of the left, right, bottom and top edges, respectively, as a percentage of the page measured from the bottom left corner.  and many more.   Geometric shapes   polygon(x, y, ...) ; x, y are vectors containing the coordinates of the vertices of the polygon.   Graphic help   help(plotmath) .  example(plotmath) .  demo(plotmath) .  help(Hershey) .  demo(Hershey) .  help(Japanese) .  demo(Japanese) .   Graphic text and mouse  Leave graphic marks and texts.   locator(n, type) ; select with mouse a max of n locations to mark on the graph (left click, right click to stop).  text(locator(1), \"Outlier\", adj=0) ; select with mouse a location to add a string on the graph.  identify(x, y) ; add a label to a dot with mouse.  identify(x, y, labels) .  identify(x, y, \"yes\") .   Graphic device   split.screen() ; FALSE or number of regions within the current device which can, to some extent, be treated as separate graphics devices. It is useful for generating multiple plots on a single device.  layout() ; divides the device up into as many rows and columns as there are in matrix mat.   Graphic device driver  Open a special graphics window.   X11() ; under UNIX.  windows() ; under Windows.  win.printer() .  win.metafile() .    quartz() ; under OS X.  dev.new() ; returns the return value of the device opened, usually invisible NULL.  grid()  adds an rectangular grid to an existing plot.  postscript() ; starts the graphics device driver for producing PostScript graphics.  postscript(\"file.ps\", horizontal=FALSE, height=5, pointsize=10) .  postscript(\"plot1.eps\", horizontal=FALSE, onefile=FALSE, height=8, width=6, pointsize=10) .    pdf() ; starts the graphics device driver for producing PDF graphics.  png() ; idem.  jpeg() ; idem.  tiff() ; idem.  bitmap() ; idem.  dev.off() ; shuts down the specified (by default the current) device.  dev.set() ; dev.set makes the specified device the active device.  dev.list() ; returns the numbers of all open devices.  dev.next() ,  dev.prev() ; return the number and name of the next / previous device in the list of devices.  graphics.off(); terminate all devices.", 
            "title": "12, Graphical Procedures"
        }, 
        {
            "location": "/An Introduction to R/#13-packages", 
            "text": "install.package() ; on the computer.  library() ; load it.  search() ; check what is loaded.  loadedNamespaces() ; idem.  help.start() ; start the HTML help system, package section.   Find out about packages:  CRAN.R-project.org  www.bioconductor.org  www.omegahat.org", 
            "title": "13, Packages"
        }, 
        {
            "location": "/An Introduction to R/#14-os-facilities", 
            "text": "Manage files with Linux or Windows or RStudio.", 
            "title": "14, OS Facilities"
        }, 
        {
            "location": "/Jupyter Notebook and the R Kernel/", 
            "text": "Jupyter Notebook\n\n\nForeword\n\n\nNotes.\n\n\n\n\nContent\n\n\nJupyter Notebook\n\n\nDistribution\n\n\nImplementing the R Kernel (or irkernel)\n\n\n\n\n\n\n\n\n\n\n\n\nDistribution\n\n\n\n\nJupyter.org (Official Website)\n\n\nOn Windows, use the Anaconda distribution.\n\n\nThe stack includes the Jupyter (IPython) Notebook, the Cloud (online resources), the Navigator (home screen), the prompt (shell), the QTConsole, and the Spyder IDE.\n\n\n\n\n\n\nOn Linux, the Jupyter Stack can easily be installed through the bash with \npip\n. \n\n\nLaunch Jupyter Notebook (\njupyter notebook\n) or any tools through the bash or in the GUI.\n\n\n\n\n\n\nAnaconda2 has Python 2 by default (root) and Anaconda3, no surprise, has Python 3!\n\n\nHowever, other kernels can be installed on any distribution (another Python version, R, bash, etc.).\n\n\n\n\nImplementing the R Kernel (or irkernel)\n\n\n\n\nStart R (admin or sudo mode).\n\n\nEnter the commands:\n\n\n\n\ninstall.packages(c('repr','pbdZMQ', 'devtools')) # reprisalready on CRAN\n\ndevtools::install_github('IRkernel/IRdisplay')\n\ndevtools::install_github('IRkernel/IRkernel')\n\nIRkernel::installspec()\n\n\n\n\n\n\nConfigure Jupyter in R: \nIRkernel::installspec(user = FALSE)\n.\n\n\nStart Jupyter Notebook.", 
            "title": "Jupyter Notebook and the R Kernel"
        }, 
        {
            "location": "/Jupyter Notebook and the R Kernel/#distribution", 
            "text": "Jupyter.org (Official Website)  On Windows, use the Anaconda distribution.  The stack includes the Jupyter (IPython) Notebook, the Cloud (online resources), the Navigator (home screen), the prompt (shell), the QTConsole, and the Spyder IDE.    On Linux, the Jupyter Stack can easily be installed through the bash with  pip .   Launch Jupyter Notebook ( jupyter notebook ) or any tools through the bash or in the GUI.    Anaconda2 has Python 2 by default (root) and Anaconda3, no surprise, has Python 3!  However, other kernels can be installed on any distribution (another Python version, R, bash, etc.).", 
            "title": "Distribution"
        }, 
        {
            "location": "/Jupyter Notebook and the R Kernel/#implementing-the-r-kernel-or-irkernel", 
            "text": "Start R (admin or sudo mode).  Enter the commands:   install.packages(c('repr','pbdZMQ', 'devtools')) # reprisalready on CRAN\n\ndevtools::install_github('IRkernel/IRdisplay')\n\ndevtools::install_github('IRkernel/IRkernel')\n\nIRkernel::installspec()   Configure Jupyter in R:  IRkernel::installspec(user = FALSE) .  Start Jupyter Notebook.", 
            "title": "Implementing the R Kernel (or irkernel)"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/", 
            "text": "Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques\n\n\nForeword\n\n\nNotes, leads, and ideas on what R can do. \nREF: reference(s) to the book.\n From Springer, 2014.\n\n\n\n\nContent\n\n\nLe logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques\n\n\nA, Presentation\n\n\nB, Datasets\n\n\nPart 1, Basics\n\n\nChapter 1, Basic Concept, Organizing Data\n\n\nChapter 2, Import-Export and Producing Data\n\n\nChapter 3, Data Manipulation\n\n\nChapter 4, R Documentation\n\n\nChapter 5, Techniques for Plotting Graphics\n\n\nChapter 6, Initiation to R Programming\n\n\nChapter 7, Session Management\n\n\nPart 2, Mathematics and Basic Statistics\n\n\nChapter 8, Basic Mathematics, matrix algebra, integration, optimization\n\n\nChapter 9, Descriptive Statistics\n\n\nChapter 10, Random Variables, Laws, and Simulation\n\n\nChapter 11, Confidence Intervals and Hypothesis Testing\n\n\nChapter 12, Simple and Multiple Linear Regression\n\n\nChapter 13, Elementary Variance Analysis\n\n\nAppendix, Installing the R Software and Packages\n\n\nAnswers to the Exercises\n\n\n\n\n\n\n\n\n\n\n\n\nA, Presentation\n\n\nGUI\n\n\n\n\n\n\nRcommander; \nRcmdr\n pachage.\n\n\n\n\n\n\nThe R Commander: A Basic-Statistics GUI for R\n\n\n\n\n\n\nREF: p.3-5\n\n\nB, Datasets\n\n\n\n\nDatasets.\n\n\n\n\nPart 1, Basics\n\n\nChapter 1, Basic Concept, Organizing Data\n\n\nEditors\n\n\n\n\nRStudio.\n\n\nTinn-R.\n\n\nJGR.\n\n\nEmacs/ESS.\n\n\n\n\nData entry\n\n\n\n\nx \n- 2\n.\n\n\n2 -\n 2\n.\n\n\n\n\nExponent\n\n\n\n\nexp(1)\n.\n\n\n\n\nLogarithm\n\n\n\n\nlog(3)\n.\n\n\nlog(x = 3)\n.\n\n\nlog(x = 3, base(exp(1))\n.\n\n\nlog(3, exp(1))\n.\n\n\n\n\nFactorial\n\n\n\n\nfactorial(2)\n.\n\n\n\n\nFind out about an object, a variable (\nis.\n)\n\n\n\n\nis.character()\n.\n\n\nis.vector()\n.\n\n\nis.character()\n.\n\n\nis.character()\n\n\nand many more.\n\n\n\n\nConvert (\nas.\n)\n\n\n\n\nas.character()\n.\n\n\nas.raw()\n.\n\n\nas.date()\n.\n\n\nand many more.\n\n\n\n\nArray and matrix\n\n\nmatrix(1:12, nrow = 4, ncol = 3, byrow = FALSE)\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\nmatrix(1:12, nrow = 4, ncol = 3, byrow = TRUE)\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n[4,]   10   11   12\n\narray(1:12, dim = c(2, 2, 3))\n, , 1\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n, , 2\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n\n, , 3\n\n     [,1] [,2]\n[1,]    9   11\n[2,]   10   12\n\n\n\n\nVector\n\n\n\n\nvec \n- c(1.1, 2.2, 3.5)\n.\n\n\nvec \n- 1:3\n.\n\n\n\n\nSequence\n\n\n\n\nseq(1:3)\n.\n\n\n1:3\n.\n\n\n\n\nList\n\n\nc(1:3) # vector\n[1] 1 2 3\n\n# vs\n\nlist(1:3) # list\n[[1]]\n[1] 1 2 3\n\n\n\n\nData Frame\n\n\ntable, tabular\n\n\n\n\ndata.frame(name = c(), name = c(), name = c(), etc)\n; each column is a vector with a name.\n\n\n\n\nTime series\n\n\n ts(1:10, frequency=4, start=c(1959,2))\n     Qtr1 Qtr2 Qtr3 Qtr4\n1959         1    2    3\n1960    4    5    6    7\n1961    8    9   10     \n\n\n\n\nClass and mode\n\n\ntype, data, variable, object\n\n\n\n\nmode()\n.\n\n\nclass()\n; mode != class.\n\n\ntypeof()\n; type of storage.\n\n\n\n\nChapter 2, Import-Export and Producing Data\n\n\nimport, export, i/o\n\n\nInput data from files\n\n\nread.table(file = path/file.txt, header = TRUE, sep= \n\\t\n, dec=\n.\n, row.names = 1)\n\n\n\n\n\n\nattach(data)\n; dataset is attached to .GlobalEnv.\n\n\nsearch()\n; search objects in .GlobalEnv, including attached dataset,\n\n\ndetach(data)\n.\n\n\n\n\nMore about .GlobalEnv in \nChapter 7, Session Management\n.\n\n\nRead .csv and .tsv\n\n\n\n\nread.csv()\n.\n\n\nread.csv2()\n.\n\n\nread.delim()\n.\n\n\nread.delim2()\n.\n\n\nand many more.\n\n\n\n\nRead text files\n\n\n\n\nread.ftable(\"file.txt\", row.var.names = c(...), col.vars = list())\n.\n\n\nscan(\"file.txt\", skip = 9, nlines = 1, what = \"\", dec = \"\")\n.\n\n\nand many more.\n\n\n\n\nRead software files\n\n\n\n\n.sav\n; SPSS.\n\n\nread.spss\n.\n\n\n\n\n\n\n.mtp\n; Minitab.\n\n\nread.mtp\n.\n\n\n\n\n\n\n.xpt\n; SAS en data.frame.\n\n\nread.xport\n.\n\n\n\n\n\n\n.mat\n; Matlab.\n\n\nreadMat()\n.\n\n\n\n\n\n\nand many other formats and commands.\n\n\n\n\nOuput data and export\n\n\n\n\nlookup.xport()\n; for SAS.\n\n\nwrite.table(data, file=\"file.txt\", sep=\"\\t\")\n.\n\n\nxlsReadWrite()\n.\n\n\nand many more.\n\n\n\n\nMeasure computation time\n\n\n# start the timer\ntmps \n- Sys.time()\n\n# run\ndbsnp \n- read.table(\nfile\n)\n\n# stop the timer\nSys.time() - tmps\n\n\n\n\nProduce by repetition\n\n\nrepeat\n\n\nrep(1:4, reach = 2, len = 10)\n[1] 1 2 3 4 1 2 3 4 1 2\n\n\n\n\nProduce random numbers\n\n\n# generate random numbers between 0 and 1\nrunif(5)\n[1] 0.2424283 0.6140730 0.4824881 0.7263319 0.1381030\n\nrunif(5, min = 2, max = 7)\n[1] 4.588744 5.522278 4.307162 6.248397 3.854982\n\n\n\n\nMore on random number in \nChapter 10, Random Variables, Laws, and Simulation\n.\n\n\nProduce random number following a distribution\n\n\n# generate random numbers following the normal distribution\nrnorm(5)\n[1]  0.8752170  1.3869022 -0.4419174 -0.6129075 -1.6987139\n\n\n\n\nGenerate numbers with other distributions.\n\n\nProduce random number by sampling a population\n\n\nurne \n- 0:9\n\n# 20 draws from 'urne'\nsample(urne, 20, replace = TRUE)\n[1] 5 4 2 2 9 7 4 6 2 2 7 8 3 3 9 6 6 1 1 0\n\n\n\n\nProduce data by manual input (vector-like)\n\n\n\n\nFirst,  \nz \n- scan()\n.\n\n\nSecond, input data in the prompt.\n\n\n\n\nProduce data with a mini-spreadsheet (tabular-like)\n\n\n\n\nx \n- as.data.frame(de(\"\"))\n; open a spreadsheet.\n\n\ndata.entry(\"\")\n; alternatively.\n\n\nInput data; column are variables like in a data frame.\n\n\n\n\n\n\nfix(x)\n; invokes edit on x, then assigns the new (edited) version of x to the user\ns workspace.\n\n\n\n\nList of objects\n\n\n\n\nls()\n; list of objects.\n\n\nrm(list = ls())\n; remove all the objects.\n\n\n\n\nRead from and write to a database\n\n\n\n\nRODBC\n package.\n\n\nodbcConnect()\n.\n\n\nsqlQuery()\n.\n\n\nodbcClose()\n.\n\n\n\n\nREF: p.82-84\n\n\nFile management\n\n\n\n\nfile.choose()\n; open a window.\n\n\n\n\nRead from the clipboard\n\n\n\n\nFirst, copy from a spreadsheet or a table.\n\n\nSecond, \nread.clipboard()\n.\n\n\n\n\nChapter 3, Data Manipulation\n\n\nArithmetics\n\n\nx \n- c(1,2,3)\ny \n- c(4,5,6)\n\nx + y\n[1] 5 7 9\n\n\n\n\nBuilt-in functions\n\n\n\n\nlength(vec)\n; length.\n\n\nsort(vec, decreasing = TRUE)\n; sort.\n\n\nrev(vec)\n; inverse sorting.\n\n\norder(vec)\n; sort a vector according to the names or a list of strings.\n\n\nnames(vec) \n- 1:9\n; attribute names.\n\n\nrank(vec)\n; rank the elements.\n\n\nunique(vec)\n; remove doubles.\n\n\nduplicated(vec)\n; create a TRUE/FALSE vector indicating doubles.\n\n\nx %% y\n;  modulus (x mod y).\n\n\nx %/% y\n; integer division.\n\n\n\n\nDimension functions\n\n\nnumber, row, column, dimension\n\n\n\n\ndim(df)\n.\n\n\nnrow(df)\n.\n\n\nncol(df)\n.\n\n\n\n\nName functions\n\n\n\n\ndimnames(df)\n.\n\n\nnames(df)\n, \ncolnames(df)\n.\n\n\nrownames(df)\n.\n\n\n\n\nMerge functions\n\n\ncombine\n\n\n\n\ncbind()\n.\n\n\nrbind()\n.\n\n\n\n\nREF: p.98\n\n\ny \n- array(1:12, dim = c(4, 3))\n\ny\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\ny \n- cbind(y, c(100, 101, 102, 103))\n\ny\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9  100\n[2,]    2    6   10  101\n[3,]    3    7   11  102\n[4,]    4    8   12  103\n\nmerge(x, y)\n  V1 V2 V3  V4\n1  1  5  9 100\n2  2  6 10 101\n3  3  7 11 102\n4  4  8 12 103\n\n# idem with rows\n\n\n\n\nREF: p.96-98\n\n\n\n\ngtools\n package.\n\n\nsmartbind(x,y)\n; for two data frames, similar to merge.\n\n\n\n\nApply functions and family\n\n\nexcel, wrangle\n\n\nAmong the most useful function for \nwrangling\n data. Excel-like power. When and how to use them.\n\n\n\n\napply()\n.\n\n\nlapply()\n.\n\n\nsapply()\n.\n\n\nmapply()\n.\n\n\nby()\n.\n\n\nwith()\n.\n\n\nreplicate()\n.\n\n\ntransform()\n.\n\n\nrowSums(df)\n.\n\n\ncolSums(df)\n.\n\n\nrowMeans(df)\n.\n\n\ncolMeans(df)\n.\n\n\nsweep()\n.\n\n\nstack()\n.\n\n\nunstack()\n.\n\n\naggregate()\n\n\n\n\nREF: p.99\n\n\nMore help online such as this article: \nTutorial on the apply family\n, and complementary notes below.\n\n\nSweep functions\n\n\nu\n  V1 V2 V3  V4\n1  1  5  9 100\n2  2  6 10 101\n3  3  7 11 102\n4  4  8 12 103\n\n# removes pattern '3, 5, 3, 5, etc.'\nsweep(u, MARGIN = 1, STATS = c(3, 5), FUN = \n-\n)\n  V1 V2 V3 V4\n1 -2  2  6 97\n2 -3  1  5 96\n3  0  4  8 99\n4 -1  3  7 98\n\n# divide by a vector\nsweep(u, MARGIN = 2, STATS = c(2, 2, 3, 3), FUN = \n/\n)\n   V1  V2       V3       V4\n1 0.5 2.5 3.000000 33.33333\n2 1.0 3.0 3.333333 33.66667\n3 1.5 3.5 3.666667 34.00000\n4 2.0 4.0 4.000000 34.33333\n\n\n\n\nREF: p.100-101\n\n\nStack functions\n\n\nstack, unstack\n\n\nu\n  V1 V2 V3  V4\n1  1  5  9 100\n2  2  6 10 101\n3  3  7 11 102\n4  4  8 12 103\n\nv\n- stack(u)\nv\n   values ind\n1       1  V1\n2       2  V1\n3       3  V1\n4       4  V1\n5       5  V2\n6       6  V2\n7       7  V2\n8       8  V2\n9       9  V3\n10     10  V3\n11     11  V3\n12     12  V3\n13    100  V4\n14    101  V4\n15    102  V4\n16    103  V4\n\nw \n- unstack(v)\nw\n  V1 V2 V3  V4\n1  1  5  9 100\n2  2  6 10 101\n3  3  7 11 102\n4  4  8 12 103\n\n\n\n\nAggregation functions\n\n\naggregate\n\n\nw\n  V1 V2 V3  V4\n1  1  5  9 100\n2  2  6 10 101\n3  3  7 11 102\n4  4  8 12 103\n\nfac \n- c(\na\n, \nb\n, \nb\n, \na\n)\nx \n- cbind(w, fac)\nx\n  V1 V2 V3  V4 fac\n1  1  5  9 100   a\n2  2  6 10 101   b\n3  3  7 11 102   b\n4  4  8 12 103   a\n\naggregate(w, by = list(x$fac), sum)\n  Group.1 V1 V2 V3  V4\n1       a  5 13 21 203\n2       b  5 13 21 203\n\n\n\n\nREF: p.101\n\n\nBoolean \n logical functions\n\n\n\n\nlogical(2)\n; generate two FALSE in a vector; change the length.\n\n\n!logical(2)\n; generate two TRUE.\n\n\nas.logical(vec)\n.\n\n\nis.logical(vec)\n.\n\n\nisTRUE()\n.\n\n\n; AND.\n\n\n; sequential AND.\n\n\n|\n; OR.\n\n\n||\n; sequential OR.\n\n\nPrefer \n over \n, and \n||\n over \n|\n. Assessments go from left to right, and keep on going as long as the conditions are TRUE.\n\n\nxor()\n; exclusive OR.\n\n\nif\n, \nelse\n.\n\n\nany()\n; if one or another is TRUE.\n\n\nall()\n; if all are TRUE.\n\n\nidentical()\n; if all are identical.\n\n\nall.equal()\n.\n\n\n==\n or \nall.equal\n (and \n!=\n) can yield a FALSE because decimal are different on large numbers.\n\n\nall.equal(x, y, tolerance = 10^-6)\n fixes the problem.\n\n\n\n\n\n\nifelse(cond, a, b)\n; if \ncond\n is TRUE, \na\n, else, \nb\n.\n\n\nx \n- c(3:-2); sqrt(ifelse(x \n= 0, x, NA)\n.\n\n\n\n\n\n\n\n\nREF: p.126-127\n\n\nVenn functions\n\n\nA \n- 1:3\nB \n- 3:6\n\nis.element(1, A)\n[1] TRUE\nis.element(4, A)\n[1] FALSE\nis.element(4, B)\n[1] TRUE\n\nall(A %in% B)\n[1] FALSE\nall(B %in% A)\n[1] FALSE\n\nintersect(A, B)\n[1] 3\nunion(A, B)\n[1] 1 2 3 4 5 6\n\nsetdiff(A, B)\n[1] 1 2\nsetdiff(B, A)\n[1] 4 5 6\nintersect(A, B)\n[1] 3\n\n\n\n\nVector functions\n\n\n\n\nvec[2]\n; extract.\n\n\nvec[2:5]\n; extract.\n\n\nvec[c(T, F, T)]\n; extraction with filter.\n\n\nvec[vec \n 4]\n; conditional extraction.\n\n\nvec[vec == 3]\n.\n\n\nvec[which.max(z)]\n; extract the maximum value.\n\n\nvec[which.min(z)]\n.\n\n\nvec \n 4\n; yield a vector of TRUE or FALSE.\n\n\nvec[-2]\n; exclude.\n\n\nvec[-c(1,5)]\n; exclude.\n\n\n\n\nSearch functions\n\n\n\n\nmasque \n- c(TRUE, FALSE)\n.\n\n\nwhich(masque)\n; return the TRUE indices.\n\n\nwhich.min(x)\n; return the index with minimum value.\n\n\nwhich.max(x)\n.\n\n\n\n\nReplace functions\n\n\n\n\nz[c(1, 5)] \n- 1\n; replace value 1 and 5 by 1.\n\n\nz[which.max(z)] \n- 0\n; replace the maximum value.\n\n\nz[z == 0] \n- 8\n; replace zeros and FALSE.\n\n\n\n\nExtend a vector\n\n\n\n\nvecA\n.\n\n\nvecB \n- c(vecA, 4, 5)\n.\n\n\nvecC \n- c(vecA[1:4], 8, 5, vecA[5:9])\n.\n\n\n\n\nMatrix and array\n\n\n\n\nmat[r, c]\n; extract.\n\n\nmat[1, 2]\n.\n\n\nmat[,2]\n; all rows, column 2 only.\n\n\nmat[1, ]\n; all columns, row 1 only.\n\n\nmat[c(1, 3), c(4:5)]\n.\n\n\nmat[, 1, drop = FALSE]\n; avoid making a (horizontal) row with a (vertical) column.\n\n\nmat[ind]\n; matrix index.\n\n\narray[r, c, m]\n; extract.\n\n\n\n\nREF: p.110-113\n\n\nLists\n\n\nchar \n- c(\na\n, \nb\n, \nc\n)\nnumb \n- c(1, 2, 3)\ngreek \n- c(\nalpha\n, \nbeta\n, \ngamma\n)\n\nx \n- list(char, numb, greek)\nx\n[[1]]\n[1] \na\n \nb\n \nc\n\n\n[[2]]\n[1] 1 2 3\n\n[[3]]\n[1] \nalpha\n \nbeta\n  \ngamma\n\n\nnames(x) \n- c(\nchar\n, \nnumb\n, \ngreek\n)\nx\n$char\n[1] \na\n \nb\n \nc\n\n\n$numb\n[1] 1 2 3\n\n$greek\n[1] \nalpha\n \nbeta\n  \ngamma\n\n\nx[2]\n$numb\n[1] 1 2 3\n\nx[[2]][2]\n[1] 2\n\nx$numb[2]\n[1] 2\n\n\n\n\nREF: p.113-115\n\n\nString\n\n\nbla bla bla\n\n[1] \nbla bla bla\n\n\nnoquote(\nbla bla bla\n)\n[1] bla bla bla\n\nsQuote(\nbla bla bla\n)\n[1] \n\u2018bla bla bla\u2019\n\n\ndQuote(\nbla bla bla\n)\n[1] \n\u201cbla bla bla\u201d\n\n\n\n\n\nText\n\n\nwrangle, text, string, character, natural language processing, nlp\n\n\n\n\n\n\nformat()\n; and arguments:\n\n\n\n\ndigits\n.\n\n\ntrim\n.\n\n\ndigit\n.\n\n\nnsmall\n.\n\n\njustify\n.\n\n\nwidth\n.\n\n\nna.encode\n.\n\n\ndecimal.mark\n.\n\n\ndrop0trailing\n.\n\n\nand many more.\n\n\n\n\n\n\n\n\ncat(\"current working dir: \", wd)\n; print the objects, concatenate the representations.\n\n\n\n\nprintf(\"hello %d\\n\", 56)\n; mix text and data; pythonic print.\n\n\nprint(paste0(\"current working dir: \", wd))\n.\n\n\nnchar()\n; number of characters.\n\n\nx[nchar(x) \n 2]\n.\n\n\nx[x %n% c(letters, LETTERS)]\n; retrieve letters, patterns or strings in a text object; alike Venn.\n\n\npaste(ch1, ch2, sep = \"-\")\n; concatenate.\n\n\npaste0(ch1, ch2)\n; concatenate.\n\n\nsubstring(\"abcdef\", first = 1:3, last = 2:4)\n; create subsets \nab\n, \nbc\n, \ncd\n.\n\n\nstrsplit(c(\"\",\"\"), split=\" \")\n; break down a string.\n\n\ngrep(\"i\", c())\n; extract an object index.\n\n\ngsub(\"i\", \"L\", c())\n; substitute.\n\n\nsub()\n; substitute the first occurrence.\n\n\ntolower()\n.\n\n\ntoupper()\n.\n\n\n\n\nDate and time\n\n\nconvert, extract\n\n\n\n\nSys.time()\n.\n\n\ndate()\n.\n\n\nSys.setlocale()\n.\n\n\nas.numeric()\n.\n\n\nstrptime()\n; extract time.\n\n\nas.POSIXlt()\n.\n\n\n\n\nREF: p.120-123\n\n\nCustom functions (two examples)\n\n\na \n- 2\nb \n- -3\n\n# quadratic\nf \n- function (x) { x**2 - 2*x - 2 }\n\nf(a)\n[1] -2\n\nf(b)\n[1] 13\n\n# test\ng \n- function (x, y) {\n  if (x \n= y) {\n    z \n- y - x\n    print(\nx smaller\n)\n  } else {\n    z \n- x - y\n    print(\nx larger\n)\n  }\n} \n\ng(a, b)\n[1] \nx larger\n\n\ng(a, abs(b))\n[1] \nx smaller\n\n\n\n\n\nMore about custom functions in \nChapter 6, Initiation to R Programming\n.\n\n\nLoops structure\n\n\n\n\nfor\n.\n\n\nwhile\n.\n\n\nrepeat\n.\n\n\n\n\n# while\nwhile(x + y \n 7) { x \n- x + y }\n\n# for\nfor (i in 1:4) {\n    if (i == 3) break\n    for (j in 6:8) {\n        if (j == 7) next\n        j \n- i + j\n    }\n}\n\n# repeat\ni \n- 0\nrepeat {\n    i \n- i + 1\n    if (i == 4) break\n}\n\n\n\n\nLoop example\n\n\nIMC \n- function (poids, taille) {\n  imc \n- poids / taille^2\n  names(imc) \n- \nIMC\n\n  return(imc)\n}\n\nIMC(100, 1.90)\n     IMC \n27.70083 \n\np \n- c(100, 101, 95, 97)\nt \n- c(1.90, 1.75, 1.68, 1.92)\n\nIMC(p, t)\n     IMC     \nNA\n     \nNA\n     \nNA\n \n27.70083 32.97959 33.65930 26.31293 \n\nfor (i in 1:4) {\n  print(IMC(data[i,1], data[i,2]))\n}\n     IMC \n27.70083 \n     IMC \n32.97959 \n    IMC \n33.6593 \n     IMC \n26.31293 \n\n\n\n\nLoops increase computation time\n\n\nsystem.time(for (i in 1:1000000) sqrt(i))\nutilisateur     syst\u00e8me      \u00e9coul\u00e9 \n       0.19        0.01        0.22 \n\nsystem.time(sqrt(1:1000000))\nutilisateur     syst\u00e8me      \u00e9coul\u00e9 \n       0.07        0.00        0.07 \n\n\n\n\nREF: p.133-136\n\n\nBinary and decimal\n\n\nconvert\n\n\n\n\nbin2dec()\n.\n\n\ndec2bin()\n.\n\n\n\n\nREF: p.136-144, 147-152\n\n\nChapter 4, R Documentation\n\n\nHelp\n\n\n\n\n?functionname\n.\n\n\nhelp(functionname)\n.\n\n\nhelp.start()\n; user manual in the browser.\n\n\napropos('mean')\n; object with the name \nmean\n.\n\n\n\n\nLibrary\n\n\n\n\ninstall.packages('package')\n; should be done as an administrator or superuser directly in R, not an editor. Once the package is installed, it can be loaded on the PC by any user in R or an editor (such as RStudio).\n\n\nlibrary(package = 'package')\n; load a package.\n\n\nlibrary(help = package)\n; help on a specific package.\n\n\nlibrary(help = base)\n; for example.\n\n\nlibrary(help = utils)\n; for example.\n\n\nlibrary(help = datasets)\n; for example.\n\n\nlibrary(help = graphics)\n; for example.\n\n\nlibrary(help = grDevices)\n; for example.\n\n\n\n\n\n\nlibrary(lib.loc = .Library)\n; find which package (system packages, but not user packages).\n\n\nfind('function')\n; find which package (system).\n\n\ndata()\n; datasets available.\n\n\ndemo()\n; available demos by package.\n\n\ndemo(graphics)\n; give examples.\n\n\nexample(mean)\n; give examples.\n\n\n\n\nResources\n\n\n\n\nnmz\n; search the content of the R functions, package vignette, and task views.\n\n\nR-Project Mailing Lists\n; mailing lists.\n\n\nRSeek\n; search engine.\n\n\nStackOverflow\n; forum.\n\n\nAbcd\nR\n; scripts.\n\n\nCIRAD\n; forum.\n\n\nDeveloppez.net\n; forum.\n\n\nETHZ\n; mailing list.\n\n\nETHZ Manual\n.\n\n\nhttp://a\n; manuals and resources.\n\nstat.ethz.ch/mailman/listinfo/r-annonce\n\n\nETHZ List Info\n.\n\n\nR Programming Wikibooks\n; wiki.\n\n\nCRAN-R\n.\n\n\nCRAN-R Doc\n; PDF and documentation.\n\n\nCRAN-R Views\n; projects.\n\n\nR Journal\n; publication.\n\n\nJournal of Statistical Software\n; publication.\n\n\n\n\nChapter 5, Techniques for Plotting Graphics\n\n\nGraphic windows\n\n\nOf course, these commands are automated in an editor (RStudio).\n\n\n\n\ndev.new()\n; graphic window on Windows.\n\n\nwindows()\n; graphic window on Windows.\n\n\nwin.graph()\n; graphic window on Windows.\n\n\nX11()\n; graphic window on Linux.\n\n\nAdd parameters in the command:\n\n\nwidth = , height =\n.\n\n\npointsize =\n.\n\n\nxpinch = , ypinch =\n; pixels per inch.\n\n\nxpos = , ypos =\n; position of the upper left corner, in pixel.\n\n\n\n\n\n\ndev.set(num)\n; activate window number \nnum\n; there can be several graphic windows.\n\n\ndev.off(num)\n; close a window.\n\n\ngraphics.off()\n; close all windows.\n\n\ndev.list()\n; return window numbers.\n\n\ndev.cur()\n; return the current number, active window.\n\n\ndev.print(png, file = , width = , height = )\n; print.\n\n\nsavePlot(filename = , type = \"png\")\n; save.\n\n\npng(file=\" \", width = , height = )\n; save directly in .png.\n\n\njpeg()\n.\n\n\nbitmap()\n.\n\n\npostscript()\n.\n\n\npdf()\n.\n\n\n\n\n# examples\n\ndev.new(width = 200, height = 200, xpos = 100, ypos = 100)\nNULL\n\ndev.list()\nRStudioGD       png   windows \n        2         3         4 \n\ndev.cur()\nwindows \n      4\n\nhist(runif(100)) # create a graphic\n\n# in the current working directory\ndev.print(png, file = \nmygraph.png\n, width = 480, height = 480)\nsavePlot(filename = \nmygraph.png\n, type = \npng\n)\npdf(file = \nmygraph.pdf\n)\n\ndev.off()\n\n\n\n\nMultiple windows\n\n\n\n\npar(mfrow = c(3, 2))\n; create 6 graphic boxes, 3 rows X 2 columns.\n\n\n\n\nREF: p.166-167\n\n\ndev.new()\nmat \n- matrix(c(2, 3, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5), 4, 3, byrow = TRUE)\nlayout(mat)\n\n\ndev.new()\nlayout(mat, widths = c(1, 5, 14), heights = c(1,2,4,1))\nlayout.show(5)\n\n\n\n\nREF: p.168\n\n\nDraw on a graphic\n\n\n\n\nsegments(x0 = 0, y0 = 0, x1 = 1, y1 = 1)\n; draw lines on a plot.\n\n\nlines(x = c(1,0), y = c(0,1))\n.\n\n\nabline(h = 0, v = 0)\n; add a line to a plot.\n\n\nabline(a = 1, b = 1)\n.\n\n\n\n\nRandom numbers\n\n\nx \n- runif(12)\nx\n[1] 0.03344539 0.22711659 0.66696650 0.02840671 0.61067995 0.92957527\n[7] 0.26962190 0.60013387 0.04831111 0.12603905 0.41913598 0.13142315\n\n# ranking\ni \n- order(x)\ni\n[1]  4  1  9 10 12  2  7 11  8  5  3  6\n\n# reorder\nx \n- x[i]\nx\n[1] 0.02840671 0.03344539 0.04831111 0.12603905 0.13142315 0.22711659\n[7] 0.26962190 0.41913598 0.60013387 0.61067995 0.66696650 0.92957527\n\n\n\n\nMore on random number in \nChapter 10, Random Variables, Laws, and Simulation\n.\n\n\nExamples\n\n\n\n\nexample(polygon)\n; see examples.\n\n\ncurve(x**3 - 3*x, from = -2, to = 2)\n; trace a curve according to a function.\n\n\nhist(rnorm(10000), prob = TRUE, breaks = 100)\n.\n\n\nplot(runif(7), type = \"h\", axes = F); box(lty = \"1373\")\n\n\nplot(1:10, runif(10), type = \"l\", col = \"orangered\")\n\n\n\n\nHelp\n\n\n\n\ncolors()[grep(\"orange\", colors())]\n; list of tones.\n\n\n\n\nColors\n\n\n\n\nrgb(red = 26, green = 204, blue = 76, maxColorValue = 255)\n; return the code.\n\n\nrgb(red = 0.1, green = 0.8, blue = 0.3)\n.\n\n\ncol2rgb(\"#1AVV4C\")\n; inversely.\n\n\nR generates 256\u00b3 colors, 15M.\n\n\nA site about colors\n.\n\n\nrainbow(#)\n; show 1, 8, 17 or more colors; R can generate 256\u00b3 colors (over 15M),\n\n\npie(rep(1,200), labels = \"\", col = rainbow(200), border = NA)\n; show the colors.\n\n\nplot(1:40, col = rainbow(n), pch = 19, cex = 2),     grid(col = \"grey50\")\n; show.\n\n\nRColorBrewer\n package.\n\n\n\n\nlibrary('RColorBrewer')\ndisplay.brewer.all()\n\n\n\n\nImages\n\n\n\n\ncaTools\n package to manage images.\n\n\nread.gif()\n.\n\n\nimage()\n.\n\n\n\n\nWrite and add marks on a graphic\n\n\n\n\ntext(coord x, coord y, 'text')\n; write.\n\n\ndemo(plotmath)\n; see examples.\n\n\nmtext('bas', side = 1)\n; write \nbas\n on the graphic box; 4 sides of the box (bottom, left, top, right).\n\n\nlocator()\n; point with the mouse on a graphic to record coordinates; \nesc\n to show the coordinates.\n\nplot(1,1); locate area to be annotated with \ntext()\n.\n\n\ntext(locator(1), label=\"ici\")\n; add a label, one or several occurrences, by pointing the location with the mouse.\n\n\nidentify(occurrence, label)\n; add one or more labels by pointing the location with the mouse. \n\n\n\n\nGraphic parameters and graphic windows\n\n\nmargin, border, box, square, space, height, width, color, text, title, label, mark, font, police, character, language, size, length, size, tick, coordinate, x, y, log, scale, axis, axes, format, alignment, point\n\n\nAdvanced graphic package\n\n\n\n\nrgl\n.\n\n\nlattice\n.\n\n\nggplot2\n.\n\n\n\n\nREF: p.190-201\n\n\nChapter 6, Initiation to R Programming\n\n\nfunction (\nparameters\n) {\n    \nbody\n\n}\n\n\n\n\nlance \n- function (nom) {\n  cat(\nBonjour\n, nom, \n!\n)\n}\n\nlance('allo')\nBonjour Alex !\n\nbonjour \n- function (nom=\nPierre\n, langue=\nfr\n) {\n  cat(switch(langue, fr=\nBonjour\n, esp=\nHola\n, ang=\nHi\n), nom, \n!\n)\n}\n\nbonjour()\nBonjour Pierre !\nbonjour(nom=\nBen\n) # replace the default value.\nBonjour Ben !\nbonjour(langue=\nang\n)\nHi Pierre !\nbonjour(lang = \nang\n) # partial call\nHi Pierre !\nbonjour(l=\nang\n)\nHi Pierre !\nbonjour(l=\na\n)\n Pierre !\n\n\n\n\nREF: p.218-219\n\n\nUnion\n\n\n%union%\n \n- function (A,B) { union(A,B) }\nA \n- c(4,5,2,7)\nB \n- c(2,1,7,3)\n\nA %union% B\n[1] 4 5 2 7 1 3\n\n\n\n\nClass\n\n\nobj \n- 1:10\n\nclass(obj)\n[1] \ninteger\n\n\nclass(obj) \n- \nTheClass\n\n\nclass(obj)\n[1] \nTheClass\n\n\ninherits(obj, \nTheClass\n)\n[1] TRUE\n\n\n\n\nMethods\n\n\nx \n- 1:10\n\nprint.default(x)\n[1] 1 2 3 4 5 6 7 8 9 10\n\n\n\n\nREF: p.227-231\n\n\nCombine and permute\n\n\n\n\ncombinat\n package.\n\n\ncombn(5,3)\n; combine 3 numbers from 1:5.\n\n\nchoose(200,3)\n; choose 3 numbers from 1:200.\n\n\npermn(n,m)\n.\n\n\n\n\nVery time consuming!\n\n\nMore power, speed\n\n\n\n\nThe core of R in programmed in C. Converting a R function into C is easy. C is faster.\n\n\nCall it through API C.\n\n\nWith R graphic interface and C computation speed, it is the best of both world.\n\n\nEasier to set up on Linux or OS X (the OS has default compilers. Use the \nRcpp\n package. \n\n\nOn Windows, there is a need for \nRtools\n. \n\n\nR can be compiled (byte compiler) with the \nRevoScaleR\n package (parallel computing).\n\n\nbigmemory\n, \nff\n, packages; split a matrix into sub-matrices, perform computation and combine the results (parallel computing). \n\n\nUse a multi-core architecture with the \nparallel\n package.\n\n\nHighPerformanceComputing list of packages\n.\n\n\nUse the \nRmpi\n package and the MPI protocol (OpenMPI or mpich2 software).\n\n\nBuild a cluster or a collection of workstations in parallel; the \nsnow\n package\n.\n\n\nsnow\n or Simple Network of Workstation\n.\n\n\nDeveloping parallel programs using snowfall\n.\n\n\n\n\n\n\n\n\nTry parallel computing with a Monte Carlo with the \nparallel\n package\n\n\nmyfunc \n- function(M=1000) {\n    decision \n- 0\n    for (i in 1:M) {\n      x \n- rnorm(100)\n      if (shapiro.test(x)$p \n 0.05) decision \n- decision +1\n    }\nreturn(decision)\n}\n\nsystem.time({\n    M \n- 60000\n    decision \n- myfunc(M)\n    print(decision/M)\n})\n\n\n\n\n\n\nFor a parallel execution.\n\n\nStart menu.\n\n\nType devmgmt.msc\n\n\nUnder Processors in Linux, type \ntop\n in the terminal.\n\n\nThen, type \n1\n in R.\n\n\nEnter \ndetectCores()\n from the \nparallel\n package.\n\n\n\n\nrequire(\nparallel\n)\nsystem.time({\n    nbcores \n- 6 # less than detectCores() - 1\n    M \n- 60000\n    cl \n- makeCluster(nbcores, type = \nPSOCK\n)\n    out \n- clusterCall(cl, myfunc, round(M/nbcores))\n    stopCluster(cl)\n    decision \n- 0\n    for (clus in 1:nbcores) {\n        decision \n- decision + out[[clus]]\n    }\n    print(decision/(round(M/nbcores)*nbcores))\n})\n\n\n\n\n\n\nThe process number (PID) of each computation node (core) in the cluster.\n\n\n\n\nrequire(\nparallel\n)\nSys.getpid()\ncl \n- makeCluster(4,type=\nPSOCK\n)\nout \n- clusterCall(cl, Sys.getpid))\n\n\n\n\nInvolve the graphical card for more power\n\n\n\n\nRun computations with the graphical card, the GPU.\n\n\ngputools\n package\n\n\nCUDA Education \n Training, Accelerate Your Applications \n\n\n\n\n\n\n\n\nREF: p.303-308\n\n\nChapter 7, Session Management\n\n\nwork, session, save, object, instruction, graphic, create, package\n\n\nEnvironment\n\n\n\n\nglobalenv()\n; .GlobalEnv.\n\n\nnew.env()\n; new environment with its own functions, variable, etc.\n\n\nls()\n; list of objects in the environment.\n\n\nobjects()\n; idem.\n\n\nrm()\n; remove one or more objects.\n\n\nrm(list = ls())\n; remove all.\n\n\n.RData; workspace file extension.\n\n\nfile.RData; R file.\n\n\nsave.image(\"file.RData\")\n; save a R workspace to the current working directory. Several workspace can have their own objects.\n\n\nload(\"file.RData\")\n; load a R workspace from the current working directory.\n\n\nload(file.choose())\n; open the current working directory.\n\n\ngetwd()\n; get the current working directory.\n\n\nsetwd()\n; set the current working directory.\n\n\n.Rhistory; history file extension.\n\n\nhistory()\n; consult the R log.\n\n\nsavehistory()\n; save the log to a file.\n\n\nloadhistory()\n; load the log from a file.\n\n\nsearch()\n; list of attached packages.\n\n\nsearchpaths()\n;  list of paths.\n\n\nlibrary()\n; list of packages in memory.\n\n\nrequire(\"packages\")\n, \nlibrary(\"packages\")\n; load a package.\n\n\nattach(data)\n; attach a dataset to .GlobalEnv..\n\n\ndetach(data)\n.\n\n\nls(pos = 1)\n, \nls()\n; object list in database 1.\n\n\nls(pos = 2)\n; object list in database 2.\n\n\nls(pos = match(\"package:datasets\", search()))\n; list datasets.\n\n\nls(data)\n; list object related to the dataset.\n\n\nfix(data)\n; open a spreadsheet with the data.\n\n\nsink(file = \"sortie.txt\")\n; save a file on the current working directory.\n\n\nsink()\n; stop the recording.\n\n\n\n\nFile manipulation\n\n\n\n\nLow-level interface to the computer\ns file system.\n\n\nCreate a file.\n\n\nExecute the command.\n\n\nCheck out the result in the text files themselves.\n\n\nfile.create(\"sorty.txt\", showWarnings = TRUE)\n.\n\n\nfile.exists(\"sorty.txt\")\n.\n\n\nfile.remove(\"sorty.txt\")\n.\n\n\nfile.rename(\"sorty.txt\", \"sorti.txt\")\n.\n\n\nfile.append(\"sorty.txt\", \"sorti2.txt\")\n.\n\n\nfile.copy(\"sorty.txt\", \"sorti2.txt\")\n.\n\n\nfile.symlink(\"sorty.txt\", \"sorti2.txt\")\n.\n\n\nfile.path(\"sorty.txt\")\n.\n\n\nfile.show()\n.\n\n\nlist.files()\n.\n\n\nunlink()\n.\n\n\nbasename()\n.\n\n\npath.expand()\n.\n\n\nlist.files()\n.\n\n\nfile.exists()\n.\n\n\nmemory.size()\n.\n\n\nmemory.limit()\n.\n\n\n\n\nREF: p.320-330\n\n\nMemory management\n\n\n\n\nThe KSysGuard software analyzes memory usage in real time. It is a task manager and performance monitor for UNIX-like OS.\n\n\n\n\nCreate a package\n\n\n\n\nHow to: build a list of R instruction, load a dataset, create function, and output the results.\n\n\nRun a series of scripts in batch, run a script at a distance.\n\n\nSet the PATH to an executable Rgui.exe.\n\n\nOpen a R script without opening R.\n\n\nCreate a runthis script, apply \nchmod\n to use and execute it. The bash script launch R commands (it must begin with #!/in/bash).\n\n\nand much more.\n\n\n\n\nREF: p.332-338\n\n\nPart 2, Mathematics and Basic Statistics\n\n\nChapter 8, Basic Mathematics, matrix algebra, integration, optimization\n\n\nMath functions\n\n\nREF: p.342\n\n\nMatrix calculation\n\n\nA \n- matrix(c(2,3,5,4), nrow = 2, ncol = 2)\nB \n- matrix(c(1,2,2,7), nrow = 2, ncol = 2)\n\nA\n     [,1] [,2]\n[1,]    2    5\n[2,]    3    4\n\nB\n     [,1] [,2]\n[1,]    1    2\n[2,]    2    7\n\nA + B\n     [,1] [,2]\n[1,]    3    7\n[2,]    5   11\n\nA - B\n     [,1] [,2]\n[1,]    1    3\n[2,]    1   -3\n\n# scalar multiplication\nA * B\n     [,1] [,2]\n[1,]    2   10\n[2,]    6   28\n\n# matrix multiplication\nA %*% B\n     [,1] [,2]\n[1,]   12   39\n[2,]   11   34\n\n# scalar multiplication\na \n- 10\na * A\n     [,1] [,2]\n[1,]   20   50\n[2,]   30   40\n\n# transpose\nt(A)\n     [,1] [,2]\n[1,]    2    3\n[2,]    5    4\n\n# inverse\nsolve(B)\n           [,1]       [,2]\n[1,]  2.3333333 -0.6666667\n[2,] -0.6666667  0.3333333\n\nsolve(A) %*% B\n           [,1]      [,2]\n[1,]  0.8571429  3.857143\n[2,] -0.1428571 -1.142857\n\nt(A) * B\n     [,1] [,2]\n[1,]    2    6\n[2,]   10   28\n\nx \n- seq(1,4)\ny \n- seq(4,7)\n\nx\n[1] 1 2 3 4\ny\n[1] 4 5 6 7\n\nouter(x, y, FUN = \n*\n)\n     [,1] [,2] [,3] [,4]\n[1,]    4    5    6    7\n[2,]    8   10   12   14\n[3,]   12   15   18   21\n[4,]   16   20   24   28\n\n# Kronecker\nkronecker(A, B)\n     [,1] [,2] [,3] [,4]\n[1,]    2    4    5   10\n[2,]    4   14   10   35\n[3,]    3    6    4    8\n[4,]    6   21    8   28\n\n# triangle\nlower.tri(A)\n      [,1]  [,2]\n[1,] FALSE FALSE\n[2,]  TRUE FALSE\n\nlower.tri(A, diag = TRUE)\n     [,1]  [,2]\n[1,] TRUE FALSE\n[2,] TRUE  TRUE\n\nlower.tri(A) * A\n     [,1] [,2]\n[1,]    0    0\n[2,]    3    0\n\n# diagonal\ndiag(A)\n[1] 2 4\n\nsum(diag(A))\n[1] 6\n\n# kappa\nkappa(A, exact = TRUE)\n[1] 7.582401\n\n# matrix reduction\nscale(A, scale = FALSE)\n     [,1] [,2]\n[1,] -0.5  0.5\n[2,]  0.5 -0.5\nattr(,\nscaled:center\n)\n[1] 2.5 4.5\n\nscale(A, center = FALSE, scale = apply(A, 2, sd))\n         [,1]     [,2]\n[1,] 2.828427 7.071068\n[2,] 4.242641 5.656854\nattr(,\nscaled:scale\n)\n[1] 0.7071068 0.7071068\n\n# eigenvalue\neigen(A)\n$values\n[1]  7 -1\n\n$vectors\n           [,1]       [,2]\n[1,] -0.7071068 -0.8574929\n[2,] -0.7071068  0.5144958\n\n# singular value vector\nsvd(A)\n$d\n[1] 7.285383 0.960828\n\n$u\n           [,1]       [,2]\n[1,] -0.7337222 -0.6794496\n[2,] -0.6794496  0.7337222\n\n$v\n           [,1]       [,2]\n[1,] -0.4812092  0.8766058\n[2,] -0.8766058 -0.4812092\n\n# Cholesky\nchol2inv(A) \n          [,1]     [,2]\n[1,]  0.640625 -0.15625\n[2,] -0.156250  0.06250\n\n# QR\nqr(A)\n$qr\n           [,1]      [,2]\n[1,] -3.6055513 -6.101702\n[2,]  0.8320503 -1.941451\n\n$rank\n[1] 2\n\n$qraux\n[1] 1.554700 1.941451\n\n$pivot\n[1] 1 2\n\nattr(,\nclass\n)\n[1] \nqr\n\n\n\n\n\nIntegral calculus\n\n\nintegration\n\n\nmyf \n- function(x) { exp(-x^2 / 2) / sqrt(2  *pi) }\n\nintegrate(myf, lower = -Inf, upper = Inf)$value\n[1] 1\n\n\n\n\nDifferential calculus\n\n\nderivative\n\n\nD(expression(sin(cos(x + y^2))), \nx\n)\n-(cos(cos(x + y^2)) * sin(x + y^2))\n\nf \n- deriv(\nsub\nx^2, \nx\n, TRUE)\nf(3)\n[1] 9\nattr(,\ngradient\n)\n     x\n[1,] 6\n\n\n\n\n\n\nnumDeriv\n package.\n\n\ngrad()\n; first-degree derivative.\n\n\nhessian()\n; second-degree derivative.\n\n\nand many more.\n\n\n\n\n\n\n\n\nOptimisation\n\n\nlinear, programming, constraints, min-max\n\n\n# compute a 1-variable min, max (y \nsub\nx)\n\noptimize(function(x) { cos(x^2) }, lower = 0, upper = 2, maximum = FALSE)\n\nsource('\n/sub\n/.active-rstudio-document', echo = TRUE)\n\n\n\n\n\n\nnlm()\n; compute a 2-variable min, max (z \nx + y).\n\n\nnlminb()\n; add contraints on x and y, add parameters \nupper\n and \nlower\n.\n\n\noptim()\n.\n\n\nconstrOptim()\n.\n\n\nand many more.\n\n\n\n\nUnit root\n\n\nunitroot(f=function(x) { cos(x^2) }, lower = 0,upper = 2,tol = 0.00001)$root\n\npolyroot(x(3, -8, 1)) # for p(x) = 3 - 8x + x\u00b2\n\n\n\n\n\n\ncummax()\n.\n\n\ncummin()\n.\n\n\ncumprod()\n.\n\n\ncumsum()\n.\n\n\nand many more.\n\n\n\n\nChapter 9, Descriptive Statistics\n\n\nFactor, levels, labels\n\n\n\n\nfactor(c())\n\n\nas.factor()\n.\n\n\nis.factor()\n.\n\n\nlevels(var) \n- c()\n.\n\n\nlabels(var) \n- c()\n.\n\n\nlevels(var)\n; output the levels.\n\n\nlabels(var)\n; output the labels.\n\n\nnlevels(var)\n; output the number of levels.\n\n\n\n\nmydata \n- factor(mydata,\n    levels = c(1,2,3),\n    labels = c(\nred\n, \nblue\n, \ngreen\n)\n    ) \n\nmydata \n- ordered(mydata,\n    levels = c(1,3, 5),\n    labels = c(\nLow\n, \nMedium\n, \nHigh\n)\n    ) \n\n\n\n\nNames\n\n\n\n\nnames(var) \n- c()\n; add names to a vector, data frame, list.\n\n\ncolnames(var) \n- c()\n; idem.\n\n\nrownames()\n; left-most column.\n\n\ndimnames()\n; add names to an array.\n\n\n\n\nOrder\n\n\n\n\nsort(vec, decreasing = TRUE)\n.\n\n\nrev(vec)\n; inverse sorting.\n\n\norder(vec)\n; sort a vector with names or a list of strings.\n\n\nordered(vec)\n.\n\n\nas.ordered()\n.\n\n\nis.ordered()\n.\n\n\nand many more.\n\n\n\n\nConsult keywords \narithmetics\n and \nrandom numbers\n, where ordering data is commonly used.\n\n\nConvert (\nas.\n)\n\n\n\n\nis.integer()\n.\n\n\nas.integer()\n.\n\n\nas.double()\n.\n\n\nis.double()\n.\n\n\nis.numeric()\n.\n\n\nas.numeric()\n.\n\n\nis.character()\n.\n\n\nas.character()\n.\n\n\nand many more.\n\n\n\n\nTable, proportion table\n\n\ntabular, comparison, 2-dimensional, 2, two, dimensions\n\n\n\n\ntable(var1, var2)\n; 2-dimensional view; cross table.\n\n\nas.table(var)\n; convert.\n\n\ncut()\n; divide the range into intervals.\n\n\ntable(cut(x, res$breaks, include.lowest = TRUE))\n.\n\n\n\n\n\n\naddmargins(x, FUN = sum, quiet = TRUE)\n; add a column or row with sums, means, etc.\n\n\nread.ftable()\n; frequencies.\n\n\ntablefreq \n- mytable / sum(mytable)\n.\n\n\nmargin.table(tablefreq, 1)\n; margin, right and bottom.\n\n\ntablefreq[ ,ncol()]\n; extract the total.\n\n\ntablefreq[nrow(), ]\n; extract the total.\n\n\n\n\n\n\nprop.table(mytable, 1)\n; percentage view; 1, row sum = 100%.\n\n\nprop.table(mytable, 2)\n; percentage view; 2, row sum = 100%.\n\n\nwhich.max(table)\n; find the max, min, mean, etc.\n\n\n\n\nDescriptive statistics\n\n\n\n\nmean(x)\n.\n\n\nmedian(x)\n.\n\n\nquantile(x, probs = c(0.1, 0.9))\n.\n\n\nprobs = 1:10 / 10\n.\n\n\n\n\n\n\nmax(x)\n.\n\n\nmin(x)\n.\n\n\ndiff(range(x))\n.\n\n\nIQR(x)\n.\n\n\nvar.pop(x)\n, \nvar(x)\n.\n\n\nsd.pop(x)\n, \nsd(x)\n.\n\n\nco.var(x)\n.\n\n\nmad(x)\n; absolute deviation from the median.\n\n\nmean(abs(x - mean(x)))\n.\n\n\n\n\n\n\nskew(x)\n.\n\n\nkurt(x)\n.\n\n\nchisq.test()\n.\n\n\nround()\n.\n\n\nsum()\n.\n\n\nnrow()\n.\n\n\nncol()\n.\n\n\ncor(var1, var2)\n.\n\n\nmethod = \"kendall\", \"spearman\"\n\n\n\n\n\n\nrank()\n.\n\n\nrgrs\n package .\n\n\ncramer.v()\n.\n\n\n\n\n\n\n\n\nREF: p.378-379\n\n\nGraphic descriptive statistics\n\n\n\n\nplot()\n.\n\n\ndotchart(table(), col = c(\"\", \"\", \"\" ,\"\") ,pch = , main = , lcolor = )\n.\n\n\nbarplot()\n.\n\n\nbarplot(var, col = , pareto = TRUE)\n.\n\n\nbarplot(sort(table(var)), TRUE))\n.\n\n\nbarplot(xlim = , width = , space = , names.arg = , legend = , density = , ylab = , lwd = )\n.\n\n\npie()\n.\n\n\npoints(barplot(), cumsum(var), type=\"l\")\n.\n\n\nboxplot()\n.\n\n\nstem()\n.\n\n\naplpack\n package.\n\n\nstem.left()\n\n\n\n\n\n\nhist()\n.\n\n\nsegments()\n.\n\n\n\n\nREF: p.392-394, 397-398, 400-410\n\n\nChapter 10, Random Variables, Laws, and Simulation\n\n\n\n\nx %% m\n; modulo or modulus.\n\n\n\n\nRandomness\n\n\n\n\nrunif(1)\n; generate a pseudo-random number between 0 and 1.\n\n\nset.seed()\n; \nshuffle the dice!\n.\n\n\nx \n- function() { runif(1) }\n; generate random numbers, following the uniform distribution.\n\n\nrnorm(1)\n; generate a random numbers, following the normal distribution.\n\n\ngenerate random numbers with a randomness function and \ncurve()\n.\n\n\n\n\nx \n- function() { rnorm(1, 7, 1) }\n# avg = 7, sd = 1, 1 obs\n\ncurve(rnorm(x, 7, 1), xlim = c(-1,10))\n\nplot(density(rnorm(1000, 7, 1)),xlim = c(-1, 10), main=\nDensity Curve\n)\n\n\n\n\nREF: p.422-423\n\n\nmean(runif(1))\n[1] 0.6586903\n\nmean(runif(10))\n[1] 0.5196868\n\nmean(runif(100))\n[1] 0.5345603\n\nmean(runif(1000))\n[1] 0.5042301\n\nmean(runif(10000))\n[1] 0.5021896\n\n# getting closer to 0.5 as the sample increases\n\n\n\n\n\n\nConvergenceConcepts\n package to view the law of great numbers.\n\n\n\n\nDice\n\n\nREF: p.430-431\n\n\nBootstrap\n\n\nREF: p.436\n\n\nLaws\n\n\nREF: p.437-447\n\n\nChapter 11, Confidence Intervals and Hypothesis Testing\n\n\nConfidence intervals\n\n\n\n\nUse t-values with at least 30 observation in the sample.\n\n\nWith smaller samples (or larger too), use bootstraps to simulate populations from the \nboot\n package (\nboot()\n and \nboot.ci()\n).\n\n\nFor proportion with large samples, use the \nepitools\n package and \nbinom.approx()\n. With smaller samples, go with \nbinom.test()\n.\n\n\nVariance confidence intervals; test for normality with \nsigma2.test()\n.\n\n\nFor non-parametric sample, again, simulate populations with \nboot()\n and \nboot.ci()\n.\n\n\nFor median, use \nqbinom()\n.\n\n\nFor correlation, use \ncor.test()\n.\n\n\n\n\nREF: p.450-456\n\n\nTest\n\n\n\n\nIn a test, $\\alpha$ is the signification threshold, $H_0$ is the tested hypothesis.\n\n\nAverage tests;  compare the theoretical average to a reference value with the \nt.test()\n.\n\n\nCompare two theoretical averages with a \nt.test()\n.\n\n\nCompare pair samples with \nt.test(paired=TRUE)\n.\n\n\nTest variance(s) with ANOVA.\n\n\nCompare a theoretical variance with a reference value with \nsigma2.test()\n.\n\n\nCompare two theoretical variances with \nvar.test()\n.\n\n\nCompare a theoretical proportion with a reference value with \nprop.test()\n.\n\n\nCompare two theoretical proportions with \nprop.test(\n).\n\n\nTest the theoretical correlation coefficient vs a reference value with \ncor.test()\n and \ncor-.test()\n.\n\n\nTest two theoretical correlation coefficients vs a reference value with \ncor.test.2.sample()\n.\n\n\nTest of independence or chi\u00b2 with \nchisq.test()\n.\n\n\nYates chi\u00b2, adjustment chi\u00b2 with \nchisq.test()\n.\n\n\nFisher test with \nfisher.test()\n.\n\n\nAdequacy test or Shapiro-Walk test with \nshapiro.test()\n.\n\n\nPositional test or sign test or, median sign test with \nprop.test()\n and \nbinom.test()\n.\n\n\nMedian sign test for two independent samples with \nchisq.test()\n and \nfisher.test()\n.\n\n\nSign test for two matching samples with \nprop.test()\n and \nbinom.test()\n.\n\n\nWilcoxon rank test or Mann-Whitney test for two independent samples with \nwilcox.test()\n.\n\n\nWilcoxon test for two matching samples with \nwilcox.test()\n.\n\n\n\n\nREF: p.459-488\n\n\nChapter 12, Simple and Multiple Linear Regression\n\n\nRegression\n\n\n\n\nlm(y \nsub\nx\n.\n\n\nlm(y \nsub\n0 + x)\n; no intercept.\n\n\nmodel \n- lm(y \nsub\nx)\n; run the regression.\n\n\nsummary(model)\n; extract the results.\n\n\nplot(y \nsub\nx)\n; plot the results.\n\n\nabline(model)\n; add a line on the observations.\n\n\nconfint(model)\n; confidence intervals; 95% or 2.5% on both sides.\n\n\ncoefficients(model)\n; extract one or several coefficient.\n\n\nmodel$coefficients\n.\n\n\nmodel$call\n.\n\n\nmodel$residuals\n.\n\n\nanova(model)\n.\n\n\npredict(model, data.frame(LWT = prediction), interval = \"prediction\")\n\n\nand many more.\n\n\n\n\nprediction, result, extraction, residual\n\n\nREF: p.498-499\n\n\nNormality\n\n\nhistogram, test, residual, quantile-quantile, quantile, qq\n \n\n\npar(mfrow=c(1,2))\nhist(residuals(model), main = \nHistogram\n)\n\n\n\n\n\n\nqqnorm(resid(model), datax = TRUE)\n; quantile-quantile.\n\n\nqqplot()\n.\n\n\nqqline()\n.\n\n\nplot(model, 1:6, col.smooth = \"red\")\n; 6 graphics.\n\n\njarque.bera.test(residuals(model))\n; from the \ntseries\n package.\n\n\ndwtest()\n; Durbin-Watson test from the \nlmtest\n package.\n\n\n\n\nREF: p.502-503\n\n\nCorrelation\n\n\ntest, explanatory variable interaction, colinearity,  best subset\n\n\n\n\npairs(newdata, lower.panel = panel.smooth, upper.panel = add.cor)\n.\n\n\n\n\nREF: p.506\n\n\nModel improvement\n\n\n\n\nVariables selection.\n\n\nBest subset, leaps and bounds.\n\n\nForward selection.\n\n\nBackward selection.\n\n\nStepwise selection.\n\n\nResidual analysis.\n\n\nand many more.\n\n\n\n\nREF: p.511-535\n\n\nPolynomial regression\n\n\nREF: p.535-540\n\n\nChapter 13, Elementary Variance Analysis\n\n\nanova, repeated measure, between, within, inspection, hypothesis, comparison, factor, table, parameter, repeated\n\n\nREF: p.542-571\n\n\nAppendix, Installing the R Software and Packages\n\n\ninstallation, package\n\n\ninstall.packages('package')\n.\n\n\n\n\nBe sure to launch RStudio as an administrator or a superuser to install a package in R (not in RStudio); the package is accessible to all users. Then load the package in R or RStudio.\n\n\nThen attach the package to the work session with \nlibrary('package')\n or \nrequire('packages')\n.\n\n\n\n\nAnswers to the Exercises\n\n\nREF:  p.625-674", 
            "title": "Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#a-presentation", 
            "text": "GUI    Rcommander;  Rcmdr  pachage.    The R Commander: A Basic-Statistics GUI for R    REF: p.3-5", 
            "title": "A, Presentation"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#b-datasets", 
            "text": "Datasets.", 
            "title": "B, Datasets"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#part-1-basics", 
            "text": "", 
            "title": "Part 1, Basics"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#chapter-1-basic-concept-organizing-data", 
            "text": "Editors   RStudio.  Tinn-R.  JGR.  Emacs/ESS.   Data entry   x  - 2 .  2 -  2 .   Exponent   exp(1) .   Logarithm   log(3) .  log(x = 3) .  log(x = 3, base(exp(1)) .  log(3, exp(1)) .   Factorial   factorial(2) .   Find out about an object, a variable ( is. )   is.character() .  is.vector() .  is.character() .  is.character()  and many more.   Convert ( as. )   as.character() .  as.raw() .  as.date() .  and many more.   Array and matrix  matrix(1:12, nrow = 4, ncol = 3, byrow = FALSE)\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\nmatrix(1:12, nrow = 4, ncol = 3, byrow = TRUE)\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n[4,]   10   11   12\n\narray(1:12, dim = c(2, 2, 3))\n, , 1\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n, , 2\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n\n, , 3\n\n     [,1] [,2]\n[1,]    9   11\n[2,]   10   12  Vector   vec  - c(1.1, 2.2, 3.5) .  vec  - 1:3 .   Sequence   seq(1:3) .  1:3 .   List  c(1:3) # vector\n[1] 1 2 3\n\n# vs\n\nlist(1:3) # list\n[[1]]\n[1] 1 2 3  Data Frame  table, tabular   data.frame(name = c(), name = c(), name = c(), etc) ; each column is a vector with a name.   Time series   ts(1:10, frequency=4, start=c(1959,2))\n     Qtr1 Qtr2 Qtr3 Qtr4\n1959         1    2    3\n1960    4    5    6    7\n1961    8    9   10       Class and mode  type, data, variable, object   mode() .  class() ; mode != class.  typeof() ; type of storage.", 
            "title": "Chapter 1, Basic Concept, Organizing Data"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#chapter-2-import-export-and-producing-data", 
            "text": "import, export, i/o  Input data from files  read.table(file = path/file.txt, header = TRUE, sep=  \\t , dec= . , row.names = 1)   attach(data) ; dataset is attached to .GlobalEnv.  search() ; search objects in .GlobalEnv, including attached dataset,  detach(data) .   More about .GlobalEnv in  Chapter 7, Session Management .  Read .csv and .tsv   read.csv() .  read.csv2() .  read.delim() .  read.delim2() .  and many more.   Read text files   read.ftable(\"file.txt\", row.var.names = c(...), col.vars = list()) .  scan(\"file.txt\", skip = 9, nlines = 1, what = \"\", dec = \"\") .  and many more.   Read software files   .sav ; SPSS.  read.spss .    .mtp ; Minitab.  read.mtp .    .xpt ; SAS en data.frame.  read.xport .    .mat ; Matlab.  readMat() .    and many other formats and commands.   Ouput data and export   lookup.xport() ; for SAS.  write.table(data, file=\"file.txt\", sep=\"\\t\") .  xlsReadWrite() .  and many more.   Measure computation time  # start the timer\ntmps  - Sys.time()\n\n# run\ndbsnp  - read.table( file )\n\n# stop the timer\nSys.time() - tmps  Produce by repetition  repeat  rep(1:4, reach = 2, len = 10)\n[1] 1 2 3 4 1 2 3 4 1 2  Produce random numbers  # generate random numbers between 0 and 1\nrunif(5)\n[1] 0.2424283 0.6140730 0.4824881 0.7263319 0.1381030\n\nrunif(5, min = 2, max = 7)\n[1] 4.588744 5.522278 4.307162 6.248397 3.854982  More on random number in  Chapter 10, Random Variables, Laws, and Simulation .  Produce random number following a distribution  # generate random numbers following the normal distribution\nrnorm(5)\n[1]  0.8752170  1.3869022 -0.4419174 -0.6129075 -1.6987139  Generate numbers with other distributions.  Produce random number by sampling a population  urne  - 0:9\n\n# 20 draws from 'urne'\nsample(urne, 20, replace = TRUE)\n[1] 5 4 2 2 9 7 4 6 2 2 7 8 3 3 9 6 6 1 1 0  Produce data by manual input (vector-like)   First,   z  - scan() .  Second, input data in the prompt.   Produce data with a mini-spreadsheet (tabular-like)   x  - as.data.frame(de(\"\")) ; open a spreadsheet.  data.entry(\"\") ; alternatively.  Input data; column are variables like in a data frame.    fix(x) ; invokes edit on x, then assigns the new (edited) version of x to the user s workspace.   List of objects   ls() ; list of objects.  rm(list = ls()) ; remove all the objects.   Read from and write to a database   RODBC  package.  odbcConnect() .  sqlQuery() .  odbcClose() .   REF: p.82-84  File management   file.choose() ; open a window.   Read from the clipboard   First, copy from a spreadsheet or a table.  Second,  read.clipboard() .", 
            "title": "Chapter 2, Import-Export and Producing Data"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#chapter-3-data-manipulation", 
            "text": "Arithmetics  x  - c(1,2,3)\ny  - c(4,5,6)\n\nx + y\n[1] 5 7 9  Built-in functions   length(vec) ; length.  sort(vec, decreasing = TRUE) ; sort.  rev(vec) ; inverse sorting.  order(vec) ; sort a vector according to the names or a list of strings.  names(vec)  - 1:9 ; attribute names.  rank(vec) ; rank the elements.  unique(vec) ; remove doubles.  duplicated(vec) ; create a TRUE/FALSE vector indicating doubles.  x %% y ;  modulus (x mod y).  x %/% y ; integer division.   Dimension functions  number, row, column, dimension   dim(df) .  nrow(df) .  ncol(df) .   Name functions   dimnames(df) .  names(df) ,  colnames(df) .  rownames(df) .   Merge functions  combine   cbind() .  rbind() .   REF: p.98  y  - array(1:12, dim = c(4, 3))\n\ny\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n\ny  - cbind(y, c(100, 101, 102, 103))\n\ny\n     [,1] [,2] [,3] [,4]\n[1,]    1    5    9  100\n[2,]    2    6   10  101\n[3,]    3    7   11  102\n[4,]    4    8   12  103\n\nmerge(x, y)\n  V1 V2 V3  V4\n1  1  5  9 100\n2  2  6 10 101\n3  3  7 11 102\n4  4  8 12 103\n\n# idem with rows  REF: p.96-98   gtools  package.  smartbind(x,y) ; for two data frames, similar to merge.   Apply functions and family  excel, wrangle  Among the most useful function for  wrangling  data. Excel-like power. When and how to use them.   apply() .  lapply() .  sapply() .  mapply() .  by() .  with() .  replicate() .  transform() .  rowSums(df) .  colSums(df) .  rowMeans(df) .  colMeans(df) .  sweep() .  stack() .  unstack() .  aggregate()   REF: p.99  More help online such as this article:  Tutorial on the apply family , and complementary notes below.  Sweep functions  u\n  V1 V2 V3  V4\n1  1  5  9 100\n2  2  6 10 101\n3  3  7 11 102\n4  4  8 12 103\n\n# removes pattern '3, 5, 3, 5, etc.'\nsweep(u, MARGIN = 1, STATS = c(3, 5), FUN =  - )\n  V1 V2 V3 V4\n1 -2  2  6 97\n2 -3  1  5 96\n3  0  4  8 99\n4 -1  3  7 98\n\n# divide by a vector\nsweep(u, MARGIN = 2, STATS = c(2, 2, 3, 3), FUN =  / )\n   V1  V2       V3       V4\n1 0.5 2.5 3.000000 33.33333\n2 1.0 3.0 3.333333 33.66667\n3 1.5 3.5 3.666667 34.00000\n4 2.0 4.0 4.000000 34.33333  REF: p.100-101  Stack functions  stack, unstack  u\n  V1 V2 V3  V4\n1  1  5  9 100\n2  2  6 10 101\n3  3  7 11 102\n4  4  8 12 103\n\nv - stack(u)\nv\n   values ind\n1       1  V1\n2       2  V1\n3       3  V1\n4       4  V1\n5       5  V2\n6       6  V2\n7       7  V2\n8       8  V2\n9       9  V3\n10     10  V3\n11     11  V3\n12     12  V3\n13    100  V4\n14    101  V4\n15    102  V4\n16    103  V4\n\nw  - unstack(v)\nw\n  V1 V2 V3  V4\n1  1  5  9 100\n2  2  6 10 101\n3  3  7 11 102\n4  4  8 12 103  Aggregation functions  aggregate  w\n  V1 V2 V3  V4\n1  1  5  9 100\n2  2  6 10 101\n3  3  7 11 102\n4  4  8 12 103\n\nfac  - c( a ,  b ,  b ,  a )\nx  - cbind(w, fac)\nx\n  V1 V2 V3  V4 fac\n1  1  5  9 100   a\n2  2  6 10 101   b\n3  3  7 11 102   b\n4  4  8 12 103   a\n\naggregate(w, by = list(x$fac), sum)\n  Group.1 V1 V2 V3  V4\n1       a  5 13 21 203\n2       b  5 13 21 203  REF: p.101  Boolean   logical functions   logical(2) ; generate two FALSE in a vector; change the length.  !logical(2) ; generate two TRUE.  as.logical(vec) .  is.logical(vec) .  isTRUE() .  ; AND.  ; sequential AND.  | ; OR.  || ; sequential OR.  Prefer   over  , and  ||  over  | . Assessments go from left to right, and keep on going as long as the conditions are TRUE.  xor() ; exclusive OR.  if ,  else .  any() ; if one or another is TRUE.  all() ; if all are TRUE.  identical() ; if all are identical.  all.equal() .  ==  or  all.equal  (and  != ) can yield a FALSE because decimal are different on large numbers.  all.equal(x, y, tolerance = 10^-6)  fixes the problem.    ifelse(cond, a, b) ; if  cond  is TRUE,  a , else,  b .  x  - c(3:-2); sqrt(ifelse(x  = 0, x, NA) .     REF: p.126-127  Venn functions  A  - 1:3\nB  - 3:6\n\nis.element(1, A)\n[1] TRUE\nis.element(4, A)\n[1] FALSE\nis.element(4, B)\n[1] TRUE\n\nall(A %in% B)\n[1] FALSE\nall(B %in% A)\n[1] FALSE\n\nintersect(A, B)\n[1] 3\nunion(A, B)\n[1] 1 2 3 4 5 6\n\nsetdiff(A, B)\n[1] 1 2\nsetdiff(B, A)\n[1] 4 5 6\nintersect(A, B)\n[1] 3  Vector functions   vec[2] ; extract.  vec[2:5] ; extract.  vec[c(T, F, T)] ; extraction with filter.  vec[vec   4] ; conditional extraction.  vec[vec == 3] .  vec[which.max(z)] ; extract the maximum value.  vec[which.min(z)] .  vec   4 ; yield a vector of TRUE or FALSE.  vec[-2] ; exclude.  vec[-c(1,5)] ; exclude.   Search functions   masque  - c(TRUE, FALSE) .  which(masque) ; return the TRUE indices.  which.min(x) ; return the index with minimum value.  which.max(x) .   Replace functions   z[c(1, 5)]  - 1 ; replace value 1 and 5 by 1.  z[which.max(z)]  - 0 ; replace the maximum value.  z[z == 0]  - 8 ; replace zeros and FALSE.   Extend a vector   vecA .  vecB  - c(vecA, 4, 5) .  vecC  - c(vecA[1:4], 8, 5, vecA[5:9]) .   Matrix and array   mat[r, c] ; extract.  mat[1, 2] .  mat[,2] ; all rows, column 2 only.  mat[1, ] ; all columns, row 1 only.  mat[c(1, 3), c(4:5)] .  mat[, 1, drop = FALSE] ; avoid making a (horizontal) row with a (vertical) column.  mat[ind] ; matrix index.  array[r, c, m] ; extract.   REF: p.110-113  Lists  char  - c( a ,  b ,  c )\nnumb  - c(1, 2, 3)\ngreek  - c( alpha ,  beta ,  gamma )\n\nx  - list(char, numb, greek)\nx\n[[1]]\n[1]  a   b   c \n\n[[2]]\n[1] 1 2 3\n\n[[3]]\n[1]  alpha   beta    gamma \n\nnames(x)  - c( char ,  numb ,  greek )\nx\n$char\n[1]  a   b   c \n\n$numb\n[1] 1 2 3\n\n$greek\n[1]  alpha   beta    gamma \n\nx[2]\n$numb\n[1] 1 2 3\n\nx[[2]][2]\n[1] 2\n\nx$numb[2]\n[1] 2  REF: p.113-115  String  bla bla bla \n[1]  bla bla bla \n\nnoquote( bla bla bla )\n[1] bla bla bla\n\nsQuote( bla bla bla )\n[1]  \u2018bla bla bla\u2019 \n\ndQuote( bla bla bla )\n[1]  \u201cbla bla bla\u201d   Text  wrangle, text, string, character, natural language processing, nlp    format() ; and arguments:   digits .  trim .  digit .  nsmall .  justify .  width .  na.encode .  decimal.mark .  drop0trailing .  and many more.     cat(\"current working dir: \", wd) ; print the objects, concatenate the representations.   printf(\"hello %d\\n\", 56) ; mix text and data; pythonic print.  print(paste0(\"current working dir: \", wd)) .  nchar() ; number of characters.  x[nchar(x)   2] .  x[x %n% c(letters, LETTERS)] ; retrieve letters, patterns or strings in a text object; alike Venn.  paste(ch1, ch2, sep = \"-\") ; concatenate.  paste0(ch1, ch2) ; concatenate.  substring(\"abcdef\", first = 1:3, last = 2:4) ; create subsets  ab ,  bc ,  cd .  strsplit(c(\"\",\"\"), split=\" \") ; break down a string.  grep(\"i\", c()) ; extract an object index.  gsub(\"i\", \"L\", c()) ; substitute.  sub() ; substitute the first occurrence.  tolower() .  toupper() .   Date and time  convert, extract   Sys.time() .  date() .  Sys.setlocale() .  as.numeric() .  strptime() ; extract time.  as.POSIXlt() .   REF: p.120-123  Custom functions (two examples)  a  - 2\nb  - -3\n\n# quadratic\nf  - function (x) { x**2 - 2*x - 2 }\n\nf(a)\n[1] -2\n\nf(b)\n[1] 13\n\n# test\ng  - function (x, y) {\n  if (x  = y) {\n    z  - y - x\n    print( x smaller )\n  } else {\n    z  - x - y\n    print( x larger )\n  }\n} \n\ng(a, b)\n[1]  x larger \n\ng(a, abs(b))\n[1]  x smaller   More about custom functions in  Chapter 6, Initiation to R Programming .  Loops structure   for .  while .  repeat .   # while\nwhile(x + y   7) { x  - x + y }\n\n# for\nfor (i in 1:4) {\n    if (i == 3) break\n    for (j in 6:8) {\n        if (j == 7) next\n        j  - i + j\n    }\n}\n\n# repeat\ni  - 0\nrepeat {\n    i  - i + 1\n    if (i == 4) break\n}  Loop example  IMC  - function (poids, taille) {\n  imc  - poids / taille^2\n  names(imc)  -  IMC \n  return(imc)\n}\n\nIMC(100, 1.90)\n     IMC \n27.70083 \n\np  - c(100, 101, 95, 97)\nt  - c(1.90, 1.75, 1.68, 1.92)\n\nIMC(p, t)\n     IMC      NA       NA       NA  \n27.70083 32.97959 33.65930 26.31293 \n\nfor (i in 1:4) {\n  print(IMC(data[i,1], data[i,2]))\n}\n     IMC \n27.70083 \n     IMC \n32.97959 \n    IMC \n33.6593 \n     IMC \n26.31293   Loops increase computation time  system.time(for (i in 1:1000000) sqrt(i))\nutilisateur     syst\u00e8me      \u00e9coul\u00e9 \n       0.19        0.01        0.22 \n\nsystem.time(sqrt(1:1000000))\nutilisateur     syst\u00e8me      \u00e9coul\u00e9 \n       0.07        0.00        0.07   REF: p.133-136  Binary and decimal  convert   bin2dec() .  dec2bin() .   REF: p.136-144, 147-152", 
            "title": "Chapter 3, Data Manipulation"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#chapter-4-r-documentation", 
            "text": "Help   ?functionname .  help(functionname) .  help.start() ; user manual in the browser.  apropos('mean') ; object with the name  mean .   Library   install.packages('package') ; should be done as an administrator or superuser directly in R, not an editor. Once the package is installed, it can be loaded on the PC by any user in R or an editor (such as RStudio).  library(package = 'package') ; load a package.  library(help = package) ; help on a specific package.  library(help = base) ; for example.  library(help = utils) ; for example.  library(help = datasets) ; for example.  library(help = graphics) ; for example.  library(help = grDevices) ; for example.    library(lib.loc = .Library) ; find which package (system packages, but not user packages).  find('function') ; find which package (system).  data() ; datasets available.  demo() ; available demos by package.  demo(graphics) ; give examples.  example(mean) ; give examples.   Resources   nmz ; search the content of the R functions, package vignette, and task views.  R-Project Mailing Lists ; mailing lists.  RSeek ; search engine.  StackOverflow ; forum.  Abcd R ; scripts.  CIRAD ; forum.  Developpez.net ; forum.  ETHZ ; mailing list.  ETHZ Manual .  http://a ; manuals and resources. \nstat.ethz.ch/mailman/listinfo/r-annonce  ETHZ List Info .  R Programming Wikibooks ; wiki.  CRAN-R .  CRAN-R Doc ; PDF and documentation.  CRAN-R Views ; projects.  R Journal ; publication.  Journal of Statistical Software ; publication.", 
            "title": "Chapter 4, R Documentation"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#chapter-5-techniques-for-plotting-graphics", 
            "text": "Graphic windows  Of course, these commands are automated in an editor (RStudio).   dev.new() ; graphic window on Windows.  windows() ; graphic window on Windows.  win.graph() ; graphic window on Windows.  X11() ; graphic window on Linux.  Add parameters in the command:  width = , height = .  pointsize = .  xpinch = , ypinch = ; pixels per inch.  xpos = , ypos = ; position of the upper left corner, in pixel.    dev.set(num) ; activate window number  num ; there can be several graphic windows.  dev.off(num) ; close a window.  graphics.off() ; close all windows.  dev.list() ; return window numbers.  dev.cur() ; return the current number, active window.  dev.print(png, file = , width = , height = ) ; print.  savePlot(filename = , type = \"png\") ; save.  png(file=\" \", width = , height = ) ; save directly in .png.  jpeg() .  bitmap() .  postscript() .  pdf() .   # examples\n\ndev.new(width = 200, height = 200, xpos = 100, ypos = 100)\nNULL\n\ndev.list()\nRStudioGD       png   windows \n        2         3         4 \n\ndev.cur()\nwindows \n      4\n\nhist(runif(100)) # create a graphic\n\n# in the current working directory\ndev.print(png, file =  mygraph.png , width = 480, height = 480)\nsavePlot(filename =  mygraph.png , type =  png )\npdf(file =  mygraph.pdf )\n\ndev.off()  Multiple windows   par(mfrow = c(3, 2)) ; create 6 graphic boxes, 3 rows X 2 columns.   REF: p.166-167  dev.new()\nmat  - matrix(c(2, 3, 0, 1, 0, 0, 0, 4, 0, 0, 0, 5), 4, 3, byrow = TRUE)\nlayout(mat)\n\n\ndev.new()\nlayout(mat, widths = c(1, 5, 14), heights = c(1,2,4,1))\nlayout.show(5)  REF: p.168  Draw on a graphic   segments(x0 = 0, y0 = 0, x1 = 1, y1 = 1) ; draw lines on a plot.  lines(x = c(1,0), y = c(0,1)) .  abline(h = 0, v = 0) ; add a line to a plot.  abline(a = 1, b = 1) .   Random numbers  x  - runif(12)\nx\n[1] 0.03344539 0.22711659 0.66696650 0.02840671 0.61067995 0.92957527\n[7] 0.26962190 0.60013387 0.04831111 0.12603905 0.41913598 0.13142315\n\n# ranking\ni  - order(x)\ni\n[1]  4  1  9 10 12  2  7 11  8  5  3  6\n\n# reorder\nx  - x[i]\nx\n[1] 0.02840671 0.03344539 0.04831111 0.12603905 0.13142315 0.22711659\n[7] 0.26962190 0.41913598 0.60013387 0.61067995 0.66696650 0.92957527  More on random number in  Chapter 10, Random Variables, Laws, and Simulation .  Examples   example(polygon) ; see examples.  curve(x**3 - 3*x, from = -2, to = 2) ; trace a curve according to a function.  hist(rnorm(10000), prob = TRUE, breaks = 100) .  plot(runif(7), type = \"h\", axes = F); box(lty = \"1373\")  plot(1:10, runif(10), type = \"l\", col = \"orangered\")   Help   colors()[grep(\"orange\", colors())] ; list of tones.   Colors   rgb(red = 26, green = 204, blue = 76, maxColorValue = 255) ; return the code.  rgb(red = 0.1, green = 0.8, blue = 0.3) .  col2rgb(\"#1AVV4C\") ; inversely.  R generates 256\u00b3 colors, 15M.  A site about colors .  rainbow(#) ; show 1, 8, 17 or more colors; R can generate 256\u00b3 colors (over 15M),  pie(rep(1,200), labels = \"\", col = rainbow(200), border = NA) ; show the colors.  plot(1:40, col = rainbow(n), pch = 19, cex = 2),     grid(col = \"grey50\") ; show.  RColorBrewer  package.   library('RColorBrewer')\ndisplay.brewer.all()  Images   caTools  package to manage images.  read.gif() .  image() .   Write and add marks on a graphic   text(coord x, coord y, 'text') ; write.  demo(plotmath) ; see examples.  mtext('bas', side = 1) ; write  bas  on the graphic box; 4 sides of the box (bottom, left, top, right).  locator() ; point with the mouse on a graphic to record coordinates;  esc  to show the coordinates. \nplot(1,1); locate area to be annotated with  text() .  text(locator(1), label=\"ici\") ; add a label, one or several occurrences, by pointing the location with the mouse.  identify(occurrence, label) ; add one or more labels by pointing the location with the mouse.    Graphic parameters and graphic windows  margin, border, box, square, space, height, width, color, text, title, label, mark, font, police, character, language, size, length, size, tick, coordinate, x, y, log, scale, axis, axes, format, alignment, point  Advanced graphic package   rgl .  lattice .  ggplot2 .   REF: p.190-201", 
            "title": "Chapter 5, Techniques for Plotting Graphics"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#chapter-6-initiation-to-r-programming", 
            "text": "function ( parameters ) {\n     body \n}  lance  - function (nom) {\n  cat( Bonjour , nom,  ! )\n}\n\nlance('allo')\nBonjour Alex !\n\nbonjour  - function (nom= Pierre , langue= fr ) {\n  cat(switch(langue, fr= Bonjour , esp= Hola , ang= Hi ), nom,  ! )\n}\n\nbonjour()\nBonjour Pierre !\nbonjour(nom= Ben ) # replace the default value.\nBonjour Ben !\nbonjour(langue= ang )\nHi Pierre !\nbonjour(lang =  ang ) # partial call\nHi Pierre !\nbonjour(l= ang )\nHi Pierre !\nbonjour(l= a )\n Pierre !  REF: p.218-219  Union  %union%   - function (A,B) { union(A,B) }\nA  - c(4,5,2,7)\nB  - c(2,1,7,3)\n\nA %union% B\n[1] 4 5 2 7 1 3  Class  obj  - 1:10\n\nclass(obj)\n[1]  integer \n\nclass(obj)  -  TheClass \n\nclass(obj)\n[1]  TheClass \n\ninherits(obj,  TheClass )\n[1] TRUE  Methods  x  - 1:10\n\nprint.default(x)\n[1] 1 2 3 4 5 6 7 8 9 10  REF: p.227-231  Combine and permute   combinat  package.  combn(5,3) ; combine 3 numbers from 1:5.  choose(200,3) ; choose 3 numbers from 1:200.  permn(n,m) .   Very time consuming!  More power, speed   The core of R in programmed in C. Converting a R function into C is easy. C is faster.  Call it through API C.  With R graphic interface and C computation speed, it is the best of both world.  Easier to set up on Linux or OS X (the OS has default compilers. Use the  Rcpp  package.   On Windows, there is a need for  Rtools .   R can be compiled (byte compiler) with the  RevoScaleR  package (parallel computing).  bigmemory ,  ff , packages; split a matrix into sub-matrices, perform computation and combine the results (parallel computing).   Use a multi-core architecture with the  parallel  package.  HighPerformanceComputing list of packages .  Use the  Rmpi  package and the MPI protocol (OpenMPI or mpich2 software).  Build a cluster or a collection of workstations in parallel; the  snow  package .  snow  or Simple Network of Workstation .  Developing parallel programs using snowfall .     Try parallel computing with a Monte Carlo with the  parallel  package  myfunc  - function(M=1000) {\n    decision  - 0\n    for (i in 1:M) {\n      x  - rnorm(100)\n      if (shapiro.test(x)$p   0.05) decision  - decision +1\n    }\nreturn(decision)\n}\n\nsystem.time({\n    M  - 60000\n    decision  - myfunc(M)\n    print(decision/M)\n})   For a parallel execution.  Start menu.  Type devmgmt.msc  Under Processors in Linux, type  top  in the terminal.  Then, type  1  in R.  Enter  detectCores()  from the  parallel  package.   require( parallel )\nsystem.time({\n    nbcores  - 6 # less than detectCores() - 1\n    M  - 60000\n    cl  - makeCluster(nbcores, type =  PSOCK )\n    out  - clusterCall(cl, myfunc, round(M/nbcores))\n    stopCluster(cl)\n    decision  - 0\n    for (clus in 1:nbcores) {\n        decision  - decision + out[[clus]]\n    }\n    print(decision/(round(M/nbcores)*nbcores))\n})   The process number (PID) of each computation node (core) in the cluster.   require( parallel )\nSys.getpid()\ncl  - makeCluster(4,type= PSOCK )\nout  - clusterCall(cl, Sys.getpid))  Involve the graphical card for more power   Run computations with the graphical card, the GPU.  gputools  package  CUDA Education   Training, Accelerate Your Applications      REF: p.303-308", 
            "title": "Chapter 6, Initiation to R Programming"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#chapter-7-session-management", 
            "text": "work, session, save, object, instruction, graphic, create, package  Environment   globalenv() ; .GlobalEnv.  new.env() ; new environment with its own functions, variable, etc.  ls() ; list of objects in the environment.  objects() ; idem.  rm() ; remove one or more objects.  rm(list = ls()) ; remove all.  .RData; workspace file extension.  file.RData; R file.  save.image(\"file.RData\") ; save a R workspace to the current working directory. Several workspace can have their own objects.  load(\"file.RData\") ; load a R workspace from the current working directory.  load(file.choose()) ; open the current working directory.  getwd() ; get the current working directory.  setwd() ; set the current working directory.  .Rhistory; history file extension.  history() ; consult the R log.  savehistory() ; save the log to a file.  loadhistory() ; load the log from a file.  search() ; list of attached packages.  searchpaths() ;  list of paths.  library() ; list of packages in memory.  require(\"packages\") ,  library(\"packages\") ; load a package.  attach(data) ; attach a dataset to .GlobalEnv..  detach(data) .  ls(pos = 1) ,  ls() ; object list in database 1.  ls(pos = 2) ; object list in database 2.  ls(pos = match(\"package:datasets\", search())) ; list datasets.  ls(data) ; list object related to the dataset.  fix(data) ; open a spreadsheet with the data.  sink(file = \"sortie.txt\") ; save a file on the current working directory.  sink() ; stop the recording.   File manipulation   Low-level interface to the computer s file system.  Create a file.  Execute the command.  Check out the result in the text files themselves.  file.create(\"sorty.txt\", showWarnings = TRUE) .  file.exists(\"sorty.txt\") .  file.remove(\"sorty.txt\") .  file.rename(\"sorty.txt\", \"sorti.txt\") .  file.append(\"sorty.txt\", \"sorti2.txt\") .  file.copy(\"sorty.txt\", \"sorti2.txt\") .  file.symlink(\"sorty.txt\", \"sorti2.txt\") .  file.path(\"sorty.txt\") .  file.show() .  list.files() .  unlink() .  basename() .  path.expand() .  list.files() .  file.exists() .  memory.size() .  memory.limit() .   REF: p.320-330  Memory management   The KSysGuard software analyzes memory usage in real time. It is a task manager and performance monitor for UNIX-like OS.   Create a package   How to: build a list of R instruction, load a dataset, create function, and output the results.  Run a series of scripts in batch, run a script at a distance.  Set the PATH to an executable Rgui.exe.  Open a R script without opening R.  Create a runthis script, apply  chmod  to use and execute it. The bash script launch R commands (it must begin with #!/in/bash).  and much more.   REF: p.332-338", 
            "title": "Chapter 7, Session Management"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#part-2-mathematics-and-basic-statistics", 
            "text": "", 
            "title": "Part 2, Mathematics and Basic Statistics"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#chapter-8-basic-mathematics-matrix-algebra-integration-optimization", 
            "text": "Math functions  REF: p.342  Matrix calculation  A  - matrix(c(2,3,5,4), nrow = 2, ncol = 2)\nB  - matrix(c(1,2,2,7), nrow = 2, ncol = 2)\n\nA\n     [,1] [,2]\n[1,]    2    5\n[2,]    3    4\n\nB\n     [,1] [,2]\n[1,]    1    2\n[2,]    2    7\n\nA + B\n     [,1] [,2]\n[1,]    3    7\n[2,]    5   11\n\nA - B\n     [,1] [,2]\n[1,]    1    3\n[2,]    1   -3\n\n# scalar multiplication\nA * B\n     [,1] [,2]\n[1,]    2   10\n[2,]    6   28\n\n# matrix multiplication\nA %*% B\n     [,1] [,2]\n[1,]   12   39\n[2,]   11   34\n\n# scalar multiplication\na  - 10\na * A\n     [,1] [,2]\n[1,]   20   50\n[2,]   30   40\n\n# transpose\nt(A)\n     [,1] [,2]\n[1,]    2    3\n[2,]    5    4\n\n# inverse\nsolve(B)\n           [,1]       [,2]\n[1,]  2.3333333 -0.6666667\n[2,] -0.6666667  0.3333333\n\nsolve(A) %*% B\n           [,1]      [,2]\n[1,]  0.8571429  3.857143\n[2,] -0.1428571 -1.142857\n\nt(A) * B\n     [,1] [,2]\n[1,]    2    6\n[2,]   10   28\n\nx  - seq(1,4)\ny  - seq(4,7)\n\nx\n[1] 1 2 3 4\ny\n[1] 4 5 6 7\n\nouter(x, y, FUN =  * )\n     [,1] [,2] [,3] [,4]\n[1,]    4    5    6    7\n[2,]    8   10   12   14\n[3,]   12   15   18   21\n[4,]   16   20   24   28\n\n# Kronecker\nkronecker(A, B)\n     [,1] [,2] [,3] [,4]\n[1,]    2    4    5   10\n[2,]    4   14   10   35\n[3,]    3    6    4    8\n[4,]    6   21    8   28\n\n# triangle\nlower.tri(A)\n      [,1]  [,2]\n[1,] FALSE FALSE\n[2,]  TRUE FALSE\n\nlower.tri(A, diag = TRUE)\n     [,1]  [,2]\n[1,] TRUE FALSE\n[2,] TRUE  TRUE\n\nlower.tri(A) * A\n     [,1] [,2]\n[1,]    0    0\n[2,]    3    0\n\n# diagonal\ndiag(A)\n[1] 2 4\n\nsum(diag(A))\n[1] 6\n\n# kappa\nkappa(A, exact = TRUE)\n[1] 7.582401\n\n# matrix reduction\nscale(A, scale = FALSE)\n     [,1] [,2]\n[1,] -0.5  0.5\n[2,]  0.5 -0.5\nattr(, scaled:center )\n[1] 2.5 4.5\n\nscale(A, center = FALSE, scale = apply(A, 2, sd))\n         [,1]     [,2]\n[1,] 2.828427 7.071068\n[2,] 4.242641 5.656854\nattr(, scaled:scale )\n[1] 0.7071068 0.7071068\n\n# eigenvalue\neigen(A)\n$values\n[1]  7 -1\n\n$vectors\n           [,1]       [,2]\n[1,] -0.7071068 -0.8574929\n[2,] -0.7071068  0.5144958\n\n# singular value vector\nsvd(A)\n$d\n[1] 7.285383 0.960828\n\n$u\n           [,1]       [,2]\n[1,] -0.7337222 -0.6794496\n[2,] -0.6794496  0.7337222\n\n$v\n           [,1]       [,2]\n[1,] -0.4812092  0.8766058\n[2,] -0.8766058 -0.4812092\n\n# Cholesky\nchol2inv(A) \n          [,1]     [,2]\n[1,]  0.640625 -0.15625\n[2,] -0.156250  0.06250\n\n# QR\nqr(A)\n$qr\n           [,1]      [,2]\n[1,] -3.6055513 -6.101702\n[2,]  0.8320503 -1.941451\n\n$rank\n[1] 2\n\n$qraux\n[1] 1.554700 1.941451\n\n$pivot\n[1] 1 2\n\nattr(, class )\n[1]  qr   Integral calculus  integration  myf  - function(x) { exp(-x^2 / 2) / sqrt(2  *pi) }\n\nintegrate(myf, lower = -Inf, upper = Inf)$value\n[1] 1  Differential calculus  derivative  D(expression(sin(cos(x + y^2))),  x )\n-(cos(cos(x + y^2)) * sin(x + y^2))\n\nf  - deriv( sub x^2,  x , TRUE)\nf(3)\n[1] 9\nattr(, gradient )\n     x\n[1,] 6   numDeriv  package.  grad() ; first-degree derivative.  hessian() ; second-degree derivative.  and many more.     Optimisation  linear, programming, constraints, min-max  # compute a 1-variable min, max (y  sub x)\n\noptimize(function(x) { cos(x^2) }, lower = 0, upper = 2, maximum = FALSE)\n\nsource(' /sub /.active-rstudio-document', echo = TRUE)   nlm() ; compute a 2-variable min, max (z  x + y).  nlminb() ; add contraints on x and y, add parameters  upper  and  lower .  optim() .  constrOptim() .  and many more.   Unit root  unitroot(f=function(x) { cos(x^2) }, lower = 0,upper = 2,tol = 0.00001)$root\n\npolyroot(x(3, -8, 1)) # for p(x) = 3 - 8x + x\u00b2   cummax() .  cummin() .  cumprod() .  cumsum() .  and many more.", 
            "title": "Chapter 8, Basic Mathematics, matrix algebra, integration, optimization"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#chapter-9-descriptive-statistics", 
            "text": "Factor, levels, labels   factor(c())  as.factor() .  is.factor() .  levels(var)  - c() .  labels(var)  - c() .  levels(var) ; output the levels.  labels(var) ; output the labels.  nlevels(var) ; output the number of levels.   mydata  - factor(mydata,\n    levels = c(1,2,3),\n    labels = c( red ,  blue ,  green )\n    ) \n\nmydata  - ordered(mydata,\n    levels = c(1,3, 5),\n    labels = c( Low ,  Medium ,  High )\n    )   Names   names(var)  - c() ; add names to a vector, data frame, list.  colnames(var)  - c() ; idem.  rownames() ; left-most column.  dimnames() ; add names to an array.   Order   sort(vec, decreasing = TRUE) .  rev(vec) ; inverse sorting.  order(vec) ; sort a vector with names or a list of strings.  ordered(vec) .  as.ordered() .  is.ordered() .  and many more.   Consult keywords  arithmetics  and  random numbers , where ordering data is commonly used.  Convert ( as. )   is.integer() .  as.integer() .  as.double() .  is.double() .  is.numeric() .  as.numeric() .  is.character() .  as.character() .  and many more.   Table, proportion table  tabular, comparison, 2-dimensional, 2, two, dimensions   table(var1, var2) ; 2-dimensional view; cross table.  as.table(var) ; convert.  cut() ; divide the range into intervals.  table(cut(x, res$breaks, include.lowest = TRUE)) .    addmargins(x, FUN = sum, quiet = TRUE) ; add a column or row with sums, means, etc.  read.ftable() ; frequencies.  tablefreq  - mytable / sum(mytable) .  margin.table(tablefreq, 1) ; margin, right and bottom.  tablefreq[ ,ncol()] ; extract the total.  tablefreq[nrow(), ] ; extract the total.    prop.table(mytable, 1) ; percentage view; 1, row sum = 100%.  prop.table(mytable, 2) ; percentage view; 2, row sum = 100%.  which.max(table) ; find the max, min, mean, etc.   Descriptive statistics   mean(x) .  median(x) .  quantile(x, probs = c(0.1, 0.9)) .  probs = 1:10 / 10 .    max(x) .  min(x) .  diff(range(x)) .  IQR(x) .  var.pop(x) ,  var(x) .  sd.pop(x) ,  sd(x) .  co.var(x) .  mad(x) ; absolute deviation from the median.  mean(abs(x - mean(x))) .    skew(x) .  kurt(x) .  chisq.test() .  round() .  sum() .  nrow() .  ncol() .  cor(var1, var2) .  method = \"kendall\", \"spearman\"    rank() .  rgrs  package .  cramer.v() .     REF: p.378-379  Graphic descriptive statistics   plot() .  dotchart(table(), col = c(\"\", \"\", \"\" ,\"\") ,pch = , main = , lcolor = ) .  barplot() .  barplot(var, col = , pareto = TRUE) .  barplot(sort(table(var)), TRUE)) .  barplot(xlim = , width = , space = , names.arg = , legend = , density = , ylab = , lwd = ) .  pie() .  points(barplot(), cumsum(var), type=\"l\") .  boxplot() .  stem() .  aplpack  package.  stem.left()    hist() .  segments() .   REF: p.392-394, 397-398, 400-410", 
            "title": "Chapter 9, Descriptive Statistics"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#chapter-10-random-variables-laws-and-simulation", 
            "text": "x %% m ; modulo or modulus.   Randomness   runif(1) ; generate a pseudo-random number between 0 and 1.  set.seed() ;  shuffle the dice! .  x  - function() { runif(1) } ; generate random numbers, following the uniform distribution.  rnorm(1) ; generate a random numbers, following the normal distribution.  generate random numbers with a randomness function and  curve() .   x  - function() { rnorm(1, 7, 1) }\n# avg = 7, sd = 1, 1 obs\n\ncurve(rnorm(x, 7, 1), xlim = c(-1,10))\n\nplot(density(rnorm(1000, 7, 1)),xlim = c(-1, 10), main= Density Curve )  REF: p.422-423  mean(runif(1))\n[1] 0.6586903\n\nmean(runif(10))\n[1] 0.5196868\n\nmean(runif(100))\n[1] 0.5345603\n\nmean(runif(1000))\n[1] 0.5042301\n\nmean(runif(10000))\n[1] 0.5021896\n\n# getting closer to 0.5 as the sample increases   ConvergenceConcepts  package to view the law of great numbers.   Dice  REF: p.430-431  Bootstrap  REF: p.436  Laws  REF: p.437-447", 
            "title": "Chapter 10, Random Variables, Laws, and Simulation"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#chapter-11-confidence-intervals-and-hypothesis-testing", 
            "text": "Confidence intervals   Use t-values with at least 30 observation in the sample.  With smaller samples (or larger too), use bootstraps to simulate populations from the  boot  package ( boot()  and  boot.ci() ).  For proportion with large samples, use the  epitools  package and  binom.approx() . With smaller samples, go with  binom.test() .  Variance confidence intervals; test for normality with  sigma2.test() .  For non-parametric sample, again, simulate populations with  boot()  and  boot.ci() .  For median, use  qbinom() .  For correlation, use  cor.test() .   REF: p.450-456  Test   In a test, $\\alpha$ is the signification threshold, $H_0$ is the tested hypothesis.  Average tests;  compare the theoretical average to a reference value with the  t.test() .  Compare two theoretical averages with a  t.test() .  Compare pair samples with  t.test(paired=TRUE) .  Test variance(s) with ANOVA.  Compare a theoretical variance with a reference value with  sigma2.test() .  Compare two theoretical variances with  var.test() .  Compare a theoretical proportion with a reference value with  prop.test() .  Compare two theoretical proportions with  prop.test( ).  Test the theoretical correlation coefficient vs a reference value with  cor.test()  and  cor-.test() .  Test two theoretical correlation coefficients vs a reference value with  cor.test.2.sample() .  Test of independence or chi\u00b2 with  chisq.test() .  Yates chi\u00b2, adjustment chi\u00b2 with  chisq.test() .  Fisher test with  fisher.test() .  Adequacy test or Shapiro-Walk test with  shapiro.test() .  Positional test or sign test or, median sign test with  prop.test()  and  binom.test() .  Median sign test for two independent samples with  chisq.test()  and  fisher.test() .  Sign test for two matching samples with  prop.test()  and  binom.test() .  Wilcoxon rank test or Mann-Whitney test for two independent samples with  wilcox.test() .  Wilcoxon test for two matching samples with  wilcox.test() .   REF: p.459-488", 
            "title": "Chapter 11, Confidence Intervals and Hypothesis Testing"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#chapter-12-simple-and-multiple-linear-regression", 
            "text": "Regression   lm(y  sub x .  lm(y  sub 0 + x) ; no intercept.  model  - lm(y  sub x) ; run the regression.  summary(model) ; extract the results.  plot(y  sub x) ; plot the results.  abline(model) ; add a line on the observations.  confint(model) ; confidence intervals; 95% or 2.5% on both sides.  coefficients(model) ; extract one or several coefficient.  model$coefficients .  model$call .  model$residuals .  anova(model) .  predict(model, data.frame(LWT = prediction), interval = \"prediction\")  and many more.   prediction, result, extraction, residual  REF: p.498-499  Normality  histogram, test, residual, quantile-quantile, quantile, qq    par(mfrow=c(1,2))\nhist(residuals(model), main =  Histogram )   qqnorm(resid(model), datax = TRUE) ; quantile-quantile.  qqplot() .  qqline() .  plot(model, 1:6, col.smooth = \"red\") ; 6 graphics.  jarque.bera.test(residuals(model)) ; from the  tseries  package.  dwtest() ; Durbin-Watson test from the  lmtest  package.   REF: p.502-503  Correlation  test, explanatory variable interaction, colinearity,  best subset   pairs(newdata, lower.panel = panel.smooth, upper.panel = add.cor) .   REF: p.506  Model improvement   Variables selection.  Best subset, leaps and bounds.  Forward selection.  Backward selection.  Stepwise selection.  Residual analysis.  and many more.   REF: p.511-535  Polynomial regression  REF: p.535-540", 
            "title": "Chapter 12, Simple and Multiple Linear Regression"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#chapter-13-elementary-variance-analysis", 
            "text": "anova, repeated measure, between, within, inspection, hypothesis, comparison, factor, table, parameter, repeated  REF: p.542-571", 
            "title": "Chapter 13, Elementary Variance Analysis"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#appendix-installing-the-r-software-and-packages", 
            "text": "installation, package  install.packages('package') .   Be sure to launch RStudio as an administrator or a superuser to install a package in R (not in RStudio); the package is accessible to all users. Then load the package in R or RStudio.  Then attach the package to the work session with  library('package')  or  require('packages') .", 
            "title": "Appendix, Installing the R Software and Packages"
        }, 
        {
            "location": "/Le logiciel R, maitriser le langage, effectuer des analyses (bio)statistiques/#answers-to-the-exercises", 
            "text": "REF:  p.625-674", 
            "title": "Answers to the Exercises"
        }
    ]
}